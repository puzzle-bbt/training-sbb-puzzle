


























[{"body":"","categories":"","description":"Angular lernen\n","excerpt":"Angular lernen\n","ref":"/training-sbb-puzzle/docs/web/angular/","tags":"","title":"Angular"},{"body":"","categories":"","description":"Labs zu Angular\n","excerpt":"Labs zu Angular\n","ref":"/training-sbb-puzzle/labs/web/angular/","tags":"","title":"Angular Labs"},{"body":"In diesem Lab wirst du Angular installieren.\nDas Lab orientiert sich stark an der offiziellen Dokumentation von Angular. Die Dokumentation findest du unter angular.io/docs.\nTeil 1 - Installation von Node.js In diesem ersten Schritt wirst du Node.js installieren, falls Node.js noch nicht bei dir installiert ist.\nÜberprüfe zuerst, ob Node.js bereits auf deinem System installiert ist:\n1  node --version   Falls Node.js noch nicht auf deinem System installiert ist, kannst du Node.js über nvm (Node Version Manager) installieren.\nUm nvm zu installieren, verwende das Skriptinstall.sh, das sich innerhalb des repository github.com/nvm-sh/nvm befindet:\n1  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash   Verwende den Befehl\n1  nvm --version   um zu überprüfen, ob nvm richtig installiert wurde.\nnvm install\nUm eine spezifische Version\u003cx.y.z\u003evon Node.js zu installieren (Beispiel 12.22.7), verwende den Befehl\n1  nvm install \u003cversion\u003e   Angular benötigt eine Active LTS (long-term support) oder eine Maintenance LTS Version von Node.js. Die aktuellen Active LTS und Maintenance LTS Versionen von Node.js sind unten abgebildet (Stand Oktober 2021), und unter nodejs.org/en/about/releases aufgelistet.\n\nnvm list\nVerwende den Befehl\n1  nvm list   um alle installierten Versionen von Node.js aufzulisten.\nnvm use\nFalls bereits eine Version von Node.js auf deinem System installiert war, und du nvm nachträglich installiert hast, kannst du mit dem Befehl\n1  nvm use system   die bereits vorher installierte Version zur Verwendung auswählen.\nEine über nvm installierte Version \u003cx.y.z\u003e von Node.js kannst du mit\n1  nvm use \u003cx.y.z\u003e   zur Verwendung auswählen.\nnvm alias default\nZum Schluss, verwende\n1  nvm alias default \u003cversion\u003e   um eine mit Angular kompatible Version \u003cversion\u003e (Beispiele system, 12.22.7) von Node.js als Standard festzulegen.\n Für die Installation von Angular im nächsten Schritt brauchst du den package mangager npm von Node.js. Stelle sicher, dass npm ebenfalls auf deinem System installiert ist:\n1  npm --version   Teil 2 - Installation des CLI von Angular In diesem Schritt wirst du das CLI (command line interface) von Angular über npm installieren.\nVerwende dazu den Befehl\n1  npm install -g @angular/cli   Mit der Flag -g wird das CLI von Angular global installiert. Das heisst unter anderem, dass executables in einem Verzeichnis installiert oder referenziet werden, das in der Umgebungsvariablen PATH aufgelistet ist. Mehr Informationen dazu findest du hier.\nZur Überprüfung, ob Angular richtig installiert wurde, verwende\n1  ng version   Teil 3 - Erstellen einer App mit dem CLI Das Grundgerüst einer Angular-App erstellt man mit dem Befehl ng new.\nVerwende den Befehl\n1  ng new my-app   um eine neue App mit der Bezeichnung my-app zu erstellen.\nBei den zwei Eingabeaufforderungen / Prompts kannst du mit Enter die Standardoption bestätigen. Das CLI erstellt anschliessend ein Verzeichnis mit dem Namen my-app und den generierten Dateien.\nTeil 4 - Ausführen einer App mit dem CLI Das CLI von Angular einthält einen Server, der eine App lokal bereitstellen kann.\nVerwende innerhalb des mit dem CLI erstellten Verzeichnisses den Befehl\n1  ng serve   um die in der letzten Aufgabe erstellte App zu builden und zu starten.\nMit der zusätzlichen Option--openöffnet das CLI die App direkt in einem Browser. Per default wird die App unter der Webadresse localhost:4200 bereitgestellt.\nFalls alles erfolgreich war, wird eine von Angular generierte Standardseite angezeigt. Die Seite ist unten abgebildet.\n\n","categories":"","description":"Angular Setup\n","excerpt":"Angular Setup\n","ref":"/training-sbb-puzzle/labs/web/angular/angular_setup/","tags":"","title":"Angular Setup"},{"body":"In diesem Doc sind die wichtigsten Take-aways des Tour of Heroes Tutorials von Angular zusammengefasst.\nDie Dokumentation von Angular und das Tutorial findest du unter angular.io/docs.\nTeil 1 - Angular components Components sind die Bausteine von Angular-Apps. Eine App besteht normalerweise aus verschiedenen components.\nDas Grundgerüst eines component kannst du mit dem CLI von Angular erstellen.\nDie Implementierung besteht vor allem aus drei Quelldateien: TypeScript-Klasse, HTML-Template und einer Datei mit CSS-Styles.\nErstellung eines component\nUm einen component mit dem CLI zu erstellen, verwende innerhalb des im Setup erstellten Basisverzeichnis den Befehl\n1  ng generate component \u003ccomponent-name\u003e   Hier ist \u003ccomponent-name\u003e die Bezeichnung des Verzeichnis, das für den component erstellt wird. Die Abkürzungng steht für Angular.\nVerzeichnisstruktur eines component\nDie Verzeichnisse der einzelnen components befinden sich normalerweise innerhalb des Verzeichnisses \u003cbase-directory\u003e/src/app.\nDie Verzeichnisstruktur eines components \u003ccomponent-name\u003e sieht folgendermassen aus:\n1 2 3 4 5  └── \u003ccomponent-name\u003e ├── \u003ccomponent-name\u003e.component.css ├── \u003ccomponent-name\u003e.component.html ├── \u003ccomponent-name\u003e.component.spec.ts └── \u003ccomponent-name\u003e.component.ts   Quellcode eines component\nDer vom CLI erstellte Code der TypeScript-Klasse eines component mit der Bezeichnung example ist unten aufgelistet.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { constructor() { } ngOnInit() { } }   @Component ist ein decorator und enthält Metadaten für Angular. Im Code oben sind drei Eigenschaften definiert:\n selector: element selector für den component templateUrl: URL für das HTML-Template des component styleUrls: Liste mit URLs für Dateien mit CSS-Styles für den component  Element selector eines component\nMit dem element selector eines component kann man den component im HTML-Template eines anderen component einbinden. Der selector ist zusammen mit anderen Metadaten im decorator @Component definiert.\n1  \u003capp-example\u003e\u003c/app-example\u003e   Deklaration eines component\nUm einen component an einer anderen Stelle mit dem element selector zu verwenden, muss man den component in \u003cbase-directory\u003e/src/app/app.module.ts deklarieren.\n1 2 3 4  declarations: [ AppComponent, ExampleComponent ]   Allgemein muss man jeden component in genau einem NgModule deklarieren. Meistens deklariert man components im AppModule, also in \u003cbase-directory\u003e/src/app/app.module.ts .\nTeil 2 - Property binding Mit property bindings kann man im HTML-Template eines component auf Eigenschaften der TypeScript-Klasse zugreifen.\nInterpolation binding und Pipes\nEin Beispiel für interpolation ist unten aufgelistet. Im Beispiel greift man im HTML-Tmplate des component auf eine Eigenschaft der TypeScript-Klasse zu.\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { exampleName : string = 'interpolation'; constructor() { } ngOnInit() { } }    1  \u003ch2\u003e{{exampleName}}\u003c/h2\u003e   Mit pipes | kann man Strings, die man mit interpolation im HTML-Template einbindet, formatieren.\nIm Beispiel unten formatiert man einen String in uppercase.\n1  \u003ch2\u003e{{heroName | uppercase}}\u003c/h2\u003e   Two-way binding\nMit einem two-way binding kann man eine Eigenschaft einer TypeScript-Klasse an eine HTML-Textbox binden.\nBei einem two-way binding fliessen Daten in beide Richtungen. Wenn die Eigenschaft der TypeScript-Klasse geändert wird, ändert sich der Text in der Textbox und umgekehrt.\nUm ein two-way binding zu erstellen, verwendet man das Attribut [(ngModel)].\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { exampleName : string = 'two-way binding'; constructor() { } ngOnInit() { } }    1 2 3  \u003cdiv\u003e \u003cinput [(ngModel)]=\"exampleName\"\u003e \u003c/div\u003e   Um two-way bindings zu verwenden, muss man das Modul FormsModule im im AppModule (beziehungsweise in \u003cbase-directory\u003e/src/app/app.module.ts) importieren und im Array imports auflisten.\n1  import { FormsModule } from '@angular/forms';   1 2 3 4  imports: [ BrowserModule, FormsModule ]   Class binding\nMit einem class binding kann man eine CSS class unter einer Bedingung zu einem HTML-Element hinzufügen oder entfernen.\nim Beispiel unten ändert sich der CSS-Style abhängig davon, ob highlightName true ist oder nicht.\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { exampleName : string = 'class binding'; highlightName : boolan = true; constructor() { } ngOnInit() { } }    1 2 3  \u003cli [class.selected]=\"highlightName\"\u003e {{exampleName}} \u003c/li\u003e   Input property binding und @Input() decorator\nMit dem decorator @Input() kann man eine Eigenschaft einer TypeScript-Klasse als input property festlegen.\nDamit kann ein externer component an diese Eigenschaft gebunden werden, im Sinn einer Eingabe-Eigenschaft.\n1  \u003capp-hero-detail [hero]=\"selectedHero\"\u003e\u003c/app-hero-detail\u003e   1  @Input() hero?: Hero;   Dabei ist [hero] die Syntax für ein property binding. Dabei handelt es sich um ein one-way data binding, von der Eigenschaft selectedHero der TypeScript-Klasse des äusseren component zur Eigenschaft hero der TypeScript-Klasse des inneren component.\nDas property binding updated bei einer Änderung der Eigenschaft selectedHero die Eigenschaft hero ebenfalls.\nMit dem property binding wird einem parent component Kontrolle über einen child component gegeben.\nTeil 3 - Angular directives ngFor, ngIf structural directives\nMit dem structural directive *ngFor kann man innerhalb des HTML-Template durch mehrere Elemente der TypeScript-Klasse iterieren.\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { examples : string[] = [ \"interpolation\", \"two-way binding\", \"class binding\" ] constructor() { } ngOnInit() { } }    1 2 3  \u003cli *ngFor=\"let exampleName of examples\"\u003e {{exampleName}} \u003c/li\u003e   Um einen Bereich des HTML-Templates nur unter einer Bedingung darzustellen, verwendet man das structural directive *ngIf.\nZum Beispiel kann man testen, ob eine Eigenschaft der TypeScript-Klasse null oder undefined ist.\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { exampleName : string = \"interpolation\"; selectedExample : string = \"interpolation\"; constructor() { } ngOnInit() { } }    1 2 3  \u003cdiv *ngIf=\"exampleName == selectedExample\"\u003e {{exampleName}} \u003c/div\u003e   Teil 4 - User events, event handlers Click event binding, click event handler\nUm einen click event handler zu registrieren, verwendet man das Attribut (click).\n example.component.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-example', templateUrl: './example.component.html', styleUrls: ['./example.component.css'] }) export class ExampleComponent implements OnInit { examples : string[] = [ \"interpolation\", \"two-way binding\", \"class binding\" ] selectedExample : string = \"interpolation\"; constructor() { } ngOnInit() { } onSelect(example: string): void { this.selectedExample = example; } }    1 2 3 4  \u003cli *ngFor=\"let example of examples\" (click)=\"onSelect(example)\"\u003e \u003c/li\u003e \u003ch2\u003e{{selectedExample}}\u003c/h2\u003e   Teil 5 - Services Mit Services kann man in Angular Daten vom Server laden.\nUm einen Service innerhalb eines component zu verwenden, verwendet man dependency injection. Dependency injection ist ein Design Pattern, bestehend aus client, service und injector.\n@Injectable decorator\nUm einen Service über das dependency injection system von Angular zu verwenden, registriert man den Service bei einem injector.\nFür die Registrierung verwendet man den decorator @Injectable. Normalerweise registriert man den Service beim injector root.\n1 2 3  @Injectable({ providedIn: 'root', })   Wenn ein Service vom injector root bereitgestellt wird, erstellt Angular ein Singleton des Service. Das heisst, es gibt nur eine Instanz des Service. Alle clients verwenden dieselbe Instanz des Service.\nEin Service kann selber injected dependencies haben.\nDependency injection\nBei der dependency inejction übergibt man einen Service dem Konstruktor der TypeScript-Klasse eines component.\n1  constructor(private heroService: HeroService) {}   Anschliessend kann man den Service innerhalb der Klasse verwenden.Der Service ist jetzt eine Eigenschaft der TypeScript-Klasse.\nWenn man zu einer mit dependency inejction hinzugefügten Eigenschaft einer TypeScript-Klasse im HTML-Template ein binding erstellen will, muss die Eigenschaft public sein.\nLifecycle hook ngOnInit()\nServices sollten Daten nicht im Konstruktor laden, sondern im lifecycle hook ngOnInit().\nObserver Pattern\nDas Laden von Daten durch einen Service kann eine asynchrone Operation sein. Zum Beispiel weiss man beim Laden von Daten von einem Server nicht genau, wann die Daten eintreffen.\nUm dieses Problem zu vermeiden, registriert man beim Laden von Daten von einem Service eine Callback-Funktion. Sobald das Laden der Daten abgeschlossen ist, wird die Callback-Funktion aufgerufen.\nErstens hat man eine Funktion, die ein Objekt vom Typ Observable\u003cT\u003e zurückgibt. Der type parameter T gibt den Datentyp der Daten an, die man vom Service haben will.\n Funktionen für HTTP requests des http client von Angular liefern oft Daten vom Typ Observable. Mit der Funktion of kann man Daten vom Typ T in ein Objekt vom Typ Òbservable\u003cT\u003e einpacken.  1 2 3  // Code in der TypeScript-Klasse des Service  import { Observable, of } from 'rxjs';   1 2 3 4 5  // Code in der TypeScript-Klasse des Service  getHeroes(): Observable\u003cHero[]\u003e { return of(HEROES); }   Ein Objekt vom Typ Observable hat die Funktion subscribe().\nDer Funktion subscribe() übergibt man eine Callback-Funktion (im Beispiel unten eine Lambda-Expression). Sobald die Daten des Service bereit sind, werden die Daten an die Callback-Funktion übergeben.\n1 2 3 4 5 6  // Code in der TypeScript-Klasse des client  getHeroes(): void { this.heroService.getHeroes() .subscribe(loadedHeroes =\u003e this.heroes = loadedHeroes); }   Teil 6 - Router Mit dem Router von Angular ändert man den angezeigten component abhängig von der URL.\nRouter-Modul\nDen Router konfiguriert man in einem separaten Modul AppRoutingModule, beziehungsweise in der Datei {base_dir}/src/app/app-routing.module.ts.\nUm das Modul zu erstellen, verwende den folgenden Befehl:\n1  ng generate module app-routing --flat --module=app    Mit --flat wird das Modul ohne eigenes Verzeichnis erstellt. Mit --module=app wird das Modul bei den imports von AppModule aufgelistet.  Ersetze den generierten Quellcode mit folgendem Code:\n app-routing.module.ts (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14  import { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; const routes: Routes = []; @NgModule({ imports: [ RouterModule.forRoot(routes) ], exports: [ RouterModule ] }) export class AppRoutingModule { }    \nDer vom Router angezeigte component wird normalerweise mit dem selector\n1  \u003crouter-outlet\u003e\u003c/router-outlet\u003e   in das HTML-Template des component AppComponent eingebunden.\nDeklaration\nUm den selector \u003crouter-outlet\u003e zu verwenden, muss das Modul AppRoutingModule im Modul AppModule, beziehungsweise in {base_directory}/src/app/app.module.ts importiert sein.\nRoutes\nEine Route gibt dem Router an, welchen component er bei einer bestimmten URL anzeigen soll. Routes sind im Array routes des Router-Moduls AppRoutingModule aufgelistet.\nNormalerweise hat eine Route zwei Eigenschaften:\n path: String, um eine URL in der Adresszeile des Browsers zu matchen component: Component, den der Router für die gematchte URL anzeigen soll  Route ist ein Interface.\nBeispiel:\n1 2 3  const routes: Routes = [ {path : 'example', component : ExampleComponent} ];   Route für die Basis-URL\nDer path für die Basis-URL der App ist der leere String ''.\n1  path = '';   Route mit Parametern\nit der Syntax :\u003cparameter-name\u003e definiert man einen Teil einer Route als Parameter.\nIm angezeigten component liest man dann die URL aus, extrahiert den Wert des Parameters aus der URL, und passt den component an.\nBeispiel:\n1  {path: 'detail/:id', component: HeroDetailComponent},   Der Doppelpunkt gibt an, dass :id ein Parameter ist und symbolisch für einen bestimmten Wert steht.\nUm die URL auszulesen und den Wert des Parameters aus der URL auszulesen, braucht man den folgenden import:\n1  import { ActivatedRoute } from '@angular/router';   Auf die ÀctivatedRoute greift man über dependency injection zu:\n1 2 3  constructor( private route: ActivatedRoute, ) {}   Schliesslich extrahiert man den Parameter in der URL folgendermassen:\n1  id = Number(this.route.snapshot.paramMap.get('id'));   Die Werte in der paramMap sind vom Typ string. Mit der Funktion Number() wird der Wert des Parameters in einen Wert vom Typ number umgewandelt. Falls die type conversion nicht möglich ist, wird der Wert NaN (not a number) zurückgegeben.\nrouterLink directive\nUm einen Link im HTML-Template eines component einzubinden, kann man das Angular directive routerLink mit einem Pfad verwenden.\nBeispiel:\n1  \u003ca routerLink=\"/heroes\"\u003eHeroes\u003c/a\u003e   Ein directive kann man als Attribut eines Elements im HTML-Template angeben. Ein directive ist in einer TypeScript-Klasse definiert.\nTeil 7 - Server-Daten / HTTP requests Um HTTP requests zu generieren, verwendet man den HTTP client von Angular.\nUm den HTTP client zu verwenden, importiert man das HttpClientModule im AppModule, beziehungsweise in {base_dir}/src/app/app.module.ts, und fügt das HttpClientModule zum Array imports hinzu.\n1  import { HttpClientModule } from '@angular/common/http';   1 2 3 4 5  @NgModule({ imports: [ HttpClientModule, ], })   HTTP requests generiert man in der Regel innerhalb eines Service. In einem component verwendet man den Service dann über dependency injeciton.\n1 2 3  // Code innerhalb des Service  import { HttpClient, HttpHeaders } from '@angular/common/http';   Den HttpClient verwendet man innerhalb des Service auch über dependency injection:\n1 2 3 4  // Code innerhalb des Service  constructor( private http: HttpClient) {}   HTTP Get requests\nEin HTTP Get requests eines Service ist üblicherweise folgendermassen implementiert:\n1 2 3 4 5  // Code innerhalb des Service  getResult(restUrl: string): Observable\u003cT\u003e { return this.http.get\u003cT\u003e(restUrl); }   Hier enthält restUrl eine URL der REST-API, für die ein GET request generiert wird.\nDer Service liefert also ein Observable, das über einen type parameter T (üblicherweise ein Interface) das Format der geladenen Daten angibt.\nEin client, welcher den Service verwendet, muss über die Funktion subscribe() von Observable eine Callback-Funktion registrieren. Die Callback-Funktion wird aufgerufen, sobald die Daten vom Server bereit sind.\nBeispiel:\n1 2 3 4 5 6  // Code im client  getHeroes(): void { this.heroService.getHeroes() .subscribe(loadedHeroes =\u003e this.heroes = loadedHeroes); }   Anmerkung: Eine REST-API liefert Daten beispielsweise als JSON-Objekt. Die API des Servers bestimmt die Struktur des JSON-Objekts, und je nach API muss man die benötigten Daten zuerst extrahieren. Mann kann dann zum Beispiel das Interface T an die Struktur des JSON-Objekts anpassen.\nWICHTIG: Damit ein HTTP request überhaupt ausgeführt wird, muss die Funktion subscribe() des resultierenden Observable-Objekts aufgerufen werden, auch wenn man keine Callback-Funktion registriert.\nFehlerbehandlung\nOptional kann man Fehlerbehandlung einbauen, für den Fall dass der GET request fehlschlägt.\nBeispiel:\n1 2 3 4 5 6 7 8  // Code innerhalb des Service  getHeroes(): Observable\u003cHero[]\u003e { return this.http.get\u003cHero[]\u003e(this.heroesUrl) .pipe( catchError(this.handleError\u003cHero[]\u003e('getHeroes', [])) ); }   Mit pipe() wird das Observable nachbearbeitet. Für den Fall eines Fehlers wird eine Funktion für die Fehlerbehandlung registriert.\n1 2 3 4 5 6 7 8 9 10  // Code innerhalb des Service  private handleError\u003cT\u003e(operation = 'operation', result?: T) { return (error: any): Observable\u003cT\u003e =\u003e { console.error(error); return of(result as T); }; }   Im Fall eines Fehlers wird der Fehler auf der Konsole des Browsers ausgegeben, und manuell ein Observable mit einem leeren Array als Antwort für den client konstruiert.\nHTPP Put, Post und Delete requests\nAnalog zu HTTP Get requests kann man auch Put, Post und Delete requests verwenden, abhängig von der REST-API des Servers.\nWICHTIG: Damit ein HTTP request überhaupt ausgeführt wird, muss die Funktion subscribe() des resultierenden Observable-Objekts aufgerufen werden, auch wenn man keine Callback-Funktion registriert.\n","categories":"","description":"Heroes Tour: Take-aways\n","excerpt":"Heroes Tour: Take-aways\n","ref":"/training-sbb-puzzle/docs/web/angular/take_aways/","tags":"","title":"Heroes Tour: Take-aways"},{"body":"","categories":"","description":"Labs zu Web\n","excerpt":"Labs zu Web\n","ref":"/training-sbb-puzzle/labs/web/","tags":"","title":"Web Labs"},{"body":"","categories":"","description":"Exams zu Java Technologie\n","excerpt":"Exams zu Java Technologie\n","ref":"/training-sbb-puzzle/exams/java/","tags":"","title":"Java Exams"},{"body":"1: Einleitung TODO: Beschreibung zu diesem Kapitel\n","categories":"","description":"JUnit Exam\n","excerpt":"JUnit Exam\n","ref":"/training-sbb-puzzle/exams/java/exam/","tags":"","title":"JUnit Exams"},{"body":"Ziele  Ich weiss, was eine Klasse ist Ich weiss, was Variablen und Datentypen sind Ich kenne die primitiven Datentypen in Java: boolean, byte, short, int, long, double, float, char Ich kenne die Klasse String Ich kenne Arrays und kann diese instanzieren, ihnen Werte von Indexen entnehmen und Werte an Indexe zuweisen Ich kann eine Variable deklarieren und initialisieren Ich weiss, was eine statische Methode ist und kann sie aufrufen Ich verstehe den Unterschied zwischen Methoden mit und ohne Rückgabewert Ich kann eine Methodensignatur für Methoden mit und ohne Rückgabewert richtig schreiben Ich kann Methoden schreiben, die Parameter entgegennehmen Ich weiss, dass jede Anweisung mit einem Strichpunkt abgeschlossen werden muss Ich weiss, dass geschweifte Klammern einen Block definieren und ich verwende sie in jeder Kontrollstruktur, um die Code-Blocks voneinander abzugrenzen (lieber zu viel klammern als zu wenig) Ich kenne die Main-Methode und weiß, warum eine Applikation nur EINE Main-Methode haben sollte Ich kenne die Methode ‘System.out.println’ und kann sie anwenden Ich kann eine Eingabe von der Konsole lesen und in einer Variablen speichern Ich kann arithmetische Ausdrücke schreiben: Addition, Subtraktion, Multiplikation, Division, Modulo (Rest einer Division) Ich kenne die relationalen Operatoren: ==, \u003e=, \u003c=, \u003e, \u003c, != Ich kenne die booleschen Operatoren: \u0026\u0026 (AND), || (OR), ! (NOT), ^(XOR) Ich weiß, was eine bedingte Anweisung ist und kann sie korrekt anwenden Ich kann eine Schleife programmieren: for, foreach, while und do-while Ich kenne die switch-Anweisung  Änderungskontrolle    Autor Version Datum Änderungen     Ann-Sophie Junele 0.1 Mai 2020 * Initiale Version erstellt   Claudio Zesiger 0.2 23.07.2020 * Modul überprüft    Cheatsheet zum Downloaden  Einführung Was ist Java? Java ist eine objektorientierte Programmiersprache, die schon seit ca. zwei Jahrzehnten große Popularität genießt. Die Entwicklung von Java begann Anfang der 1990er-Jahre beim US-amerikanischen Hard- und Softwarehersteller Sun Microsystems. 1995 wurde die erste Version veröffentlicht. 2010 wurde Sun Microsystems von Oracle übernommen. Gegenwärtig erscheinen im Halbjahrestakt neue Java-Versionen; die neuste Version, Java 16, wurde im März 2021 veröffentlicht.\n Wichtigste Merkmale von Java Plattformunabhängigkeit  «Write once, Run anywhere»\n Der Compiler wandelt den Quellcode in Bytecode um (Kompilat) und anschliessend führt die Java Virtual Machine (JVM) den Bytecode aus. Jedes Betriebssystem hat eine andere JVM, aber jede JVM kann den Bytecode ausführen, daher kann ein- und dieselbe Java-Anwendung auf Windows, Linux, Mac OS und anderen Plattformen lauffähig sein.\nMehrfach-Paradigma Java ist in erster Linie eine objektorientierte und imperative Programmiersprache, bei der fast alles ein Objekt einer Klasse (eines Typs) ist. Wir können ein typisches Java-Programm als eine Menge von interagierenden Objekten betrachten. Die Objekte können Entitäten aus der realen Welt oder eine Art von Programmierabstraktionen darstellen. Wenn wir ein Programm schreiben, erklären wir, wie die Objekte miteinander interagieren sollen. Java unterstützt aber auch andere Programmierparadigmen, darunter generische Programmierung, parallele Programmierung, funktionale Programmierung (teilweise unterstützt) und andere.\nGarbage Collector Der Garbage Collector (Teil der JVM) führt zur Laufzeit eine automatische Speicherbereinigung von unbenutzten Objekten durch. Der Entwickler muss sich also nicht um das Aufräumen von unbenutzen Objekten kümmern.\nMultithreading Java unterstützt Multithreading auf der Ebene der Sprache und der Standardbibliothek. Es ermöglicht die gleichzeitige und parallele Ausführung mehrerer Teile eines Java-Programms.\n Code, Compile, Run Ein/e Java-Entwickler/in schreibt ein Programm in eine Textdatei mit der Erweiterung .java. Ein Programm kann eine Vielzahl solcher Dateien enthalten. Dann übersetzt der Compiler (normalerweise javac) das Programm in eine .class-Datei, die den Bytecode des Programms enthält. Danach führt die JVM das Programm aus und gibt Low-Level-Befehle an den Computer. Der Computer ist hier eine Abstraktion, welche ein Server, ein PC oder sogar ein mobiles Gerät sein kann. Tatsächlich sind die Prozesse komplexer, als hier gezeigt wird. Es ist wichtig, Folgendes zu verstehen: Der Teil vor der JVM ist plattformunabhängig, der Teil nach der JVM ist plattformabhängig.\n Terminologie    Begriff Beschreibung     Programm Eine Folge von Anweisungen (engl. “statement”), welche nacheinander ausgeführt werden (von oben nach unten)   Anweisung (statement) Eine einzelne Aktion, wie zum Beispiel das Ausgeben eines Satzes auf der Konsole. Ein Statement wird mit einem Semikolon abgeschlossen   Block Eine Gruppe von keiner, einer oder mehreren Anweisungen, die von geschweiften Klammern {…} umgeben ist   Methode Was in anderen Programmiersprachen als «Funktion» bezeichnet wird, heißt in Java «Methode». Eine Methode ist eine Folge von Anweisungen, welche eine bestimmte Aufgabe ausführt (auch bekannt als Unterprogramm oder Prozedur)   Syntax Eine Reihe von Regeln, die definieren wie ein Programm geschrieben werden muss, um gültig zu sein. Es handelt sich um eine Art Grammatik   Keyword Ein Wort, welches in der Programmiersprache eine besondere Bedeutung hat (public, class und viele andere). Diese Wörter können nicht als Variablennamen verwendet werden   Bezeichner (identifier) oder Name Ein Wort, das sich auf etwas in einem Programm bezieht (z. B. eine Variable oder einen Methodennamen)   Kommentar Eine Erklärung dazu, was eine bestimmte Anweisung oder Methode macht. Einzeilige Java-Kommentare beginnen mit // und mehrzeilige sind von den Zeichen /* */ umgeben   Whitespace Tabulator- oder Leerzeichen dienen lediglich der Lesbarkeit, vom Compiler werden sie ignoriert     Hello World Anhand des simplen Hello-World-Programms können wir bereits vieles über die zentralen Bestandteile einer Java-Anwendung erklären. Der folgende Sourcecode ist in einer Datei mit dem Namen HelloWorld.java abgelegt.\n1 2 3 4 5  public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }   Public class Bei diesem Beispiel arbeiten wir uns nun von aussen nach innen vor. Der erste Teil definiert eine neue Klasse mit dem Namen HelloWorld. Die Deklaration der Klasse besteht aus dem Zugriffsmodifizierer public (dazu später mehr) gefolgt vom Keyword class und dem Klassennamen. Jede Java-Datei darf nur eine Klasse mit dem Zugriffsmodifizierer public enthalten, weitere Klassen ohne public sind jedoch erlaubt. Der Name der Klasse mit dem Modifizierer public muss stets mit dem Dateinamen übereinstimmen. Der Klassenname wird stets gross geschrieben, einzelne Wörter werden durch einen erneuten Grossbuchstaben getrennt. Dies wird CamelCase genannt. Der Block der Klasse wird durch geschweifte Klammern angegeben.\nDie Main-Methode Innerhalb der Klasse wird nun eine Main-Methode definiert. Diese Methode ist der Einstiegspunkt eines jeden Java-Programms. Nur über eine solche Methode kann eine Java-Anwendung gestartet werden. Die Methode besteht aus dem Zugriffsmodifizierer public, dem Keyword static, dem Rückgabewert void und dem Methodennamen main. An den Namen der Methode schliesst sich ein paar runde Klammern an. Innerhalb dieser Klammern befinden sich die Parameter der Methode, in diesem Fall handelt es sich um ein String-Array. Die Angabe der genannten Teile einer Methode nennt man Methodensignatur. Der Block der Methode wird durch geschweifte Klammern angegeben. Die Main-Methode hat immer die oben gezeigte Signatur.\n“Hello World” ausgeben Innerhalb der Main-Methode sehen wir ein einzelnes Statement. Es besteht aus einer einfachen Anweisung, welche den Text “Hello, world!” auf die Kommandozeile ausgibt. Die statische Methode println() auf dem öffentlich zugänglichen Feld der Klasse System dient dazu Text auf der Konsole auszugeben. Das Statement wird mit einem Semikolon abgeschlossen.\n Variablen Namensgebung Variablen dienen dazu Werte aufzunehmen. Je nach Scope leben diese Variablen unterschiedlich lang. Zur Benennung von Variablen gibt es vier Regeln:\n Variablennamen beginnen mit einem Kleinbuchstaben Ein Variablenname darf die Buchstaben A-Z und a-z enthalten Ein Variablenname darf beliebige Zahlen von 0-9 enthalten Ein Variablenname darf die Sonderzeichen $ und _ enthalten  Best Practices Der Name einer Variable sollte so gewählt werden, dass klar ist, welcher Wert darin gespeichert wird. Als Beispiel wählen wir den Namen sum für eine Variable, welche das Resultat einer Addition enthält.\nDeklaration Unter der Deklaration einer Variable versteht man das erste “Erwähnen” einer Variable. In einer statisch typisierten Sprache wie Java bedeutet dies, dass der Typ der Variable festgelegt wird. Der Wert selbst muss bei der Deklaration je nach Scope nicht festgelegt werden. Zur Laufzeit wird für die Variable ein Bereich im Arbeitsspeicher reserviert. Hier werden später Werte, die der Variablen zugewiesen werden, gespeichert. Die Größe des Speicherbereichs hängt vom Typ der Variable ab.\nFormal gilt:\n1  \u003cvariable type\u003e \u003cvariable identifier\u003e;   Wir geben also den Datentyp und den Namen der Variable an.\nInitialisierung Unter dem Begriff Initialisierung wird die direkte Zuweisen eines Wertes bei der Deklaration einer Variablen verstanden. Lokale Variablen (Variablen, die lediglich innerhalb einer Methode gültig sind) müssen initialisiert werden, bevor sie verwendet werden können.\nBeispiel:\n1 2 3 4 5  public static void main(String[] args) { int firstSummand = 2; int secondSummand; int sum = firstSummand + secondSummand; }   Die Variable secondSummand wurde nicht initialisiert. Die Zuweisung int sum = firstSummand + secondSummand wird also nicht funktionieren.\nDeklaration mit Initialisierung Wir können eine Variable nacheinander deklarieren und dann initialisieren oder beides zusammen:\n1 2 3 4  int number; // 1. Deklaration number = 2; // 2. Initialisierung int number = 2; // beides in einer Zeile   Formal:\n1  \u003cvariable type\u003e \u003cvariable identifier\u003e = \u003cinitial value\u003e;    Datentypen In Java sind Variablen stark typisiert. Das heisst, dass alle Variablen bei ihrer Erstellung mit einem Datentyp versehen werden müssen. Seit Java 10 gibt es Typinferenz für lokale Variablen, das heisst, eine lokale Variable kann deklariert und initialisiert werden (muss gleichzeitig geschehen), ohne dass ein Datentyp angegeben werden muss - anstelle des Datentyps kann var verwendet werden:\n1  var sum = 20;   Es gibt zwei Arten von Datentypen: Primitive Datentypen und Referenztypen. Der grundlegende Unterschied besteht darin, dass eine primitive Variable den tatsächlichen Wert speichert, während eine Referenzvariable die Adresse des Objekts speichert, auf welches sie sich bezieht. Dies hat mit dem Java Memory Modell zu tun. Das nachfolgende Bild zeigt das Java Memory Modell als einfache Darstellung, es besteht grundsätzlich aus dem Stack Memory und dem Heap Space. Primitive Datentypen werden nur auf dem Stack angelegt. Objekte, wie das im Bild gezeigte Auto (Car), sind im Heap abgelegt. Die Referenz auf das Objekt wird auf dem Stack angelegt. Die Referenz “zeigt” also auf das Objekt im Heap.\nDieser fundamentale Unterschied ist relevant beim Vergleich von Werten und Referenzen. Der Operator für den Vergleich ==, vergleicht stets die Werte auf dem Stack miteinander. Bei Referenzen wird dort also überprüft, ob sie auf dasselbe Objekt zeigen. Wenn der Inhalt von Objekten verglichen werden soll, so muss dies mit der Methode equals gemacht werden.\n Primitive Datentypen Integraler Datentyp Integrale Datentypen sind immer ganze Zahlen, sie besitzen also keine Nachkommastellen. Die folgenden Datentypen speichern ganzzahlige Werte, sie unterscheiden sich nur in ihrer Grösse:\n   Datentyp Speicherbedarf Bereich     byte 8 Bit -128 … 127   short 16 Bit -32768 … 32767   int 32 Bit -2 147 483 648 … 2 147 483 647 (-2^31 … 2^31-1)   long 64 Bit -2^63 … 2^63-1    In den Werten von integralen Datentypen sind Underscores erlaubt, um die Lesbarkeit zu erhöhen (1_000_000).\nBeispiele:\n1 2  int count = 0; int million = 1_000_000;   Gleitkomma-Datentyp Gleitkomma-Datentypen speichern wie der Name bereits sagt, Zahlen mit Nachkommastellen. Diese Zahlen besitzen nur eine bestimmte Genauigkeit, sie dürfen also nicht als unendlich genau betrachtet werden. Die folgenden Datentypen speichern Zahlen mit Nachkommastellen, sie unterscheiden sich in ihrer Grösse und der Art und Weise wie sie innerhalb von Java abgelegt werden:\n   Datentyp Speicherbedarf Bereich Interne Ablage     float 32 Bit +/-1,4E-45 … +/-3,4E+38 Dezimalbruch   double 64 Bit +/-4,9E-324 … +/-1,7E+308 Gleitkommazahl    Beispiele:\n1 2  float radius = 8.5f; double area = 16.48739d;   Trotz Nachkommastellen dürfen Fliesskommzahlen des Typs float niemals zur Berechnung von Währungen verwendet werden. Innerhalb von Java wird ein float stets als Dezimalbruch geführt und die Ungenauigkeit verunmöglicht es diesen Datentyp für Währungsrechnungen zu verwenden.\nZeichen-Datentyp Ein char ist ein (vorzeichenloser) 16-Bit-Integer-Datentyp, der ein einzelnes Zeichen darstellt. Dieser Datentyp erlaubt die Repräsentation von Zeichen im so genannten Unicode-Zeichensatz.\nEin einzelnes Zeichen kann eine Ziffer, einen Buchstaben oder ein anderes Symbol sein. Um ein Zeichen zu schreiben, verwenden wir einfache Anführungszeichen wie folgt:\n1  'A', 'B', 'C', 'x', 'y', 'z', '0', '1', '2', '9'   Zeichenliterale können Symbole eines Alphabets, Ziffern von ‘0’ bis ‘9’, Whitespaces (' ‘) oder andere Zeichen oder Symbole ('$') darstellen. Verwechsle nicht die Zeichen, die Zahlen (‘9’) darstellen mit den Zahlen selbst (9). Ein Zeichen kann nicht zwei und mehr Ziffern oder Buchstaben enthalten, da es nur ein einziges Symbol darstellt.\nWir können Zeichen auf verschiedene Arten initialisieren:\n   Einfache Anführungszeichen char A = 'A';     Wir können ein Char-Literal als Integral-Literal angeben, das den Unicode-Wert des Zeichens darstellt, und Integral-Literale können entweder in Dezimal-, Oktal- oder Hexadezimalform angegeben werden.Der zulässige Bereich liegt zwischen 0 und 65535. char A = 65;   In der Unicode-Darstellung '\\\\uxxxx' können Zeichenliterale angegeben werden. Hier steht xxxx für 4 Hexadezimalzahlen. char A = '\\u0041';    Beispiele:\n1 2 3  char letter = 'a'; char point = '.'; letter++; // 'b'   Don’t get confused:  123 ist ein Integer, “123” ist ein String; ‘A’ ein Zeichen (char), “A” ist ein String; ‘1’ ist ein Zeichen (char), 1 ist ein Integer;  Logischer Datentyp Dieser Datentyp bezieht sich nur auf die zwei Werte true und false.\n1 2  boolean done = false; boolean isBigger = true;    Referenztypen Nebst primitiven Datentypen gibt es Referenzdatentypen. Eine Variable diesen Typs enthält nicht die Werte selbst wie eine Variable primitiven Typs, sondern nur einen Verweis (Referenz) auf den\nSpeicherort der Daten. Der Standardwert von Referenzvariablen ist null, welcher besagt, dass die Variable auf kein Objekt verweist.\nEs gibt zwei Unterarten von Referenztypen:\n Array: Eine Datenstruktur fester Grösse, die dazu dient, mehrere Elemente gleichen Typs zu speichern Objektdatentyp, repräsentiert ein beliebiges Objekt   Arrays Definition Häufig benötigen Software-Entwickler mehrere zusammengehörige Variablen desselben Datentyps, die logisch oder verwaltungstechnisch zusammengehören. Es wäre aber sehr aufwendig, diese Variablen alle einzeln zu deklarieren und zu verarbeiten. Zudem ist es möglich, dass die Anzahl an Objekten noch unbekannt ist und erst bei der Ausführung des Programms definiert wird. Deswegen wird in Java, wie in anderen Programmiersprachen auch, die Verwendung von Arrays unterstützt. In Arrays lassen sich beliebige primitiven Datentypen und Objekte speichern und systematisch bearbeiten. Alle Variablen haben einen gemeinsamen Namen, werden aber über unterschiedliche Indizes angesprochen.\nDeklaration Die Deklaration eines Arrays enthält folgende Bestandteile:\n   Reihenfolge W      1. Typ String, int, double, char, ...   2. Eckige Klammern []   3. Bezeichner / Namen words, numbers, values, letters...    1  String[] words;   Länge eines Arrays Die Anzahl der Elemente in einem Array wird als Länge eines Arrays bezeichnet. Diese Länge wird zum Zeitpunkt der Erstellung eines Arrays einmal festgelegt. Sie kann später in einem Programm nur durch Definition eines neuen Arrays und dem Kopieren von Werten geändert werden.\nWir können die Länge eines Arrays mithilfe einer in Java integrierten Funktionalität überprüfen:\n1  words.length   Indizierung Die Indizes in einem Array reichen immer von 0 bis length-1. Ein Array mit den ersten 100 natürlichen Zahlen hat beispielsweise eine Länge von 100 und Indizes von 0 bis 99.\nSyntax In Java müssen wir zum Zeitpunkt der Deklaration eines Arrays folgendes angeben:\n den Datentyp den Namen  und zum Zeitpunkt der Initialisierung:\n die Größe  Syntaktisch können wir ein Array eines ganzzahligen Datentyps auf folgende Weise deklarieren:\n1 2  String[] words; String words[];   Die zweite Form wird bei uns nicht verwendet.\nDieser Code deklariert die Variable words, erstellt das Array-Objekt jedoch noch nicht. Der Operator new wird in Java zum Erstellen von neuen Objekten verwendet.\n1  String[] words = new String[5];   Damit wird ein Array-Objekt der Länge 5 instanziiert. Die fünf Elemente dieses Arrays wurden mit Standardwerten initialisiert. Bei einem Array des Datentyps String ist der Default-Wert null. Alle Werte im Array werden also mit null aufgefüllt.\nWir können auch direkt die Werte der Array-Elemente angeben:\n1  String[] words = { \"Hai\", \"Oktopus\", \"Rochen\", \"Wal\", \"Fisch\" };   Es wird also ein Array mit der Grösse 5 und den angegebenen Werten erstellt.\nZugriff auf Elemente Wenn wir den Wert eines Elements in unserem Array verändern möchten, geschieht dies folgendermaßen:\n1  words[index] = value;   Wenn wir den Wert eines Array-Elements in einer Variablen außerhalb des Arrays speichern wollen:\n1  String value = words[index];    String Eine Variable, die eine Zeichenkette enthält, hat den Typ String.\n1  String hello = \"Hello, Java\";   Diese Zeichenkette besteht aus 11 Zeichen, einschließlich eines Leerzeichens. Wie wir hier ebenfalls sehen, müssen String-Literale von doppelten Anführungszeichen umgeben sein. Ein Objekt des Typs String ist unveränderlich, die Werte innerhalb eines Strings können also nach dessen Erstellung nicht mehr verändert werden.\nMethoden Der folgende Code zeigt die Verwendung einiger Methoden der Klasse String. Alle Methoden sind in der API unter https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html zu finden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124  public class StringMethoden { public static void main(String\\[\\] args) { String house = \"house\"; /** * Returns the char value at the specified index (indexing starts from 0) */ char o = house.charAt(1); /** * Returns the length of this string. */ int length = house.length(); /** * Returns true if and only if this string contains the specified sequence of char values */ boolean isContaining = house.contains(\"us\"); /** * Returns the index within this string of the first occurrence of the specified character */ int indexChar = house.indexOf('s'); /** * Returns the index within this string of the first occurrence of the specified substring */ int indexSubstring = house.indexOf(\"us\"); /** * Tests if this string starts with the specified prefix */ boolean startsWithPrefix = house.startsWith(\"Ho\"); // false boolean startsWithPrefix2 = house.startsWith(\"ho\"); // true /** * Tests if this string ends with the specified suffix */ boolean endsWithSuffix = house.endsWith(\"se\"); // true /** * Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar */ String mouse = house.replace('h', 'm'); String houseHouse = \"House, House\"; String mouseMouse = houseHouse.replace('H', 'M'); /** * Returns a new string that is a substring of this string, starting from the specified index */ String applePearLemon = \"Apple, pear, lemon\"; String pearLemon = applePearLemon.substring(7); /** * Returns a new string that is a substring of this string */ String pear = applePearLemon.substring(7, 11); /** * Converts all of the characters in this String to upper case */ String apple = \"Apple\"; String appleUpperCase = apple.toUpperCase(); // APPLE /** * Converts all of the characters in this String to lower case. */ String appleLowerCase = apple.toLowerCase(); // apple /** * Splits this string around matches of the given regular expression, puts them in a String array */ String applePear = \"Apple, pear\"; String[] fruits = applePear.split(\",\\\\s\"); // \\\\s means whitespace /** * Converts this string to a new character array */ char[] charArray = applePearLemon.toCharArray(); /** * Compares this string to the specified object */ String appleOne = \"Apple\"; String appleTwo = \"Apple\"; boolean isEqual = appleOne.equals(appleTwo); /** * Compares two strings lexicographically. * The comparison is based on the Unicode value of each character in the strings. * The result is a negative integer if this String object lexicographically precedes the argument string. * The result is a positive integer if this String object lexicographically follows the argument string. * The result is zero if the strings are equal */ String abcd = \"abcd\"; String cdef = \"cdef\"; if (abcd.compareTo(cdef) \u003c 0) { System.out.println(abcd + \" precedes \" + cdef); } if (house.compareTo(house) == 0) { System.out.println(house + \" is equal to \" + house); } if (cdef.compareTo(abcd) \u003e 0) { System.out.println(cdef + \" follows \" + abcd); } /** * Capital letters precede lower case letters */ String houseLowerCase = \"house\"; String houseUpperCase = \"HOUSE\"; if (houseLowerCase.compareTo(houseUpperCase) \u003e 0) { System.out.println(houseUpperCase + \" precedes + \" houseLowerCase); } /** * Compares two strings lexicographically, ignoring case differences */ System.out.println(houseLowerCase.compareToIgnoreCase(houseUpperCase)); } }    Scanner Eine Möglichkeit, Benutzereingaben in Java vorzunehmen, besteht in der Verwendung der Scanner-Klasse, die verwendet wird, indem zuerst die Definition der Klasse wie in Zeile 1 importiert und dann ein Objekt dieser Klasse wie in Zeile 6 erstellt wird.\n1 2 3 4 5 6 7 8 9 10  import java.util.Scanner; public class TakeInput { public static void main (String\\[\\] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"Enter your name: \"); String name = scanner.nextLine(); System.out.println(\"Your name is: \" + name); } }   Zeile 1\nDer erste Schritt besteht darin, die Scanner-Klasse zu importieren, damit sie im folgenden Code verwendet werden kann. Die Java Scanner-Klasse stammt aus dem Paket java.util. Es ist einfach zu bedienen, muss jedoch importiert werden, damit die Klasse funktioniert.\nZeile 6\n Wir deklarieren den Datentyp als Scanner und geben ihm den Bezeichner scanner Wir weisen der Variable scanner ein neues Objekt zu, welches den System-Eingabestream enthält (System.in)  Zeile 8\n Wir deklarieren eine Variable vom Datentyp String mit dem Bezeichner name Wir weisen der Variable name das Resultat der Methode scanner.nextLine() zu Diese Methode nimmt die Tastatureingabe vom Benutzer auf der Kommandozeile entgegen. Sie wird beendet, wenn der Benutzer die Enter-Taste drückt   Statische Methoden Mittlerweile hast du bereits einige statische Methoden kennengelernt, wie zum Beispiel die Main-Methode oder die Methode println() der Klasse System oder die Methode valueOf() der String-Klasse. Hier wollen wir uns nun genauer anschauen, was statische Methoden sind, denn diese wirst du unter anderem für das Lösen der Übungen benötigen. Das Keyword static ist ein sehr nützliches Werkzeug in Java. Bei statischen Methoden sind einige wichtige Punkte zu beachten.\n Diese Methoden gehören nicht zu einer Referenz von einem bestimmten Objekt Diese Methoden werden über den Klassennamen aufgerufen und nicht über eine Referenz von einem bestimmten Objekt  Wenn also in einem Methodenkopf das Keyword static steht, dann weisst du, dass es sich um eine statische Methode handeln muss. Schauen wir uns unterschiedliche Methodendeklarationen an (folgendes gilt für statische Methoden wie auch für nicht-statische Methoden): Wenn eine Methode einen Wert an ihren Aufrufer zurückgeben soll, sprechen wir von einer Methode mit einem Rückgabewert:\n1 2 3  public static returnType methodName() { return returnValue; // der Typ des Rückgabewerts muss vom Typ sein, welcher im Methodenkopf steht }   Wir sehen, dass in der Methodendeklaration angeben werden muss, welcher Typ zurückgegeben wird.\nWenn eine Methode keinen Wert zurückgegeben soll, verwenden wir das Keyword void:\n1 2 3  public static void methodName() { }   Das Keyword return ist in Methoden ohne Rückgabewert weiterhin zulässig um die Methode zu verlassen. Die Angabe eines Rückgabewerts entfällt in diesem Fall.\nWir können auch Werte einer Methode übergeben – hierbei sprechen wir von Parametern.\n1 2 3  public static void methodName(type identifier) { }   Ein Parameter besteht immer aus dem Datentyp und einem Bezeichner. Wir können beliebig viele Parameter an eine Methode übergeben. Gemäss den SBB Code Conventions (Regeln für den Programmcode) sollte eine Methode nicht mehr als acht Parameter haben.\nRegeln  Die Reihenfolge der Schlüsselwörter im Methodenkopf darf nicht verändert werden Bei der Auswahl des Methodennamens müssen die gleichen Regeln wie bei der Benennung einer Variablen eingehalten werden Keine doppelten Methoden: Jede Methodensignatur darf in einer Klasse nur einmal vorkommen  Aufruf Innerhalb der gleichen Klasse\n1  methodName();   Ausserhalb:\n1  ClassName.methodName();    Mathematik \u0026 Logik Mathe in Java ist sehr einfach. Beachte, dass mathematische Java-Operationen einer bestimmten Reihenfolge folgen (Punkt-Operationen vor Strich-Operationen)\nArithmetische Operatoren    Symbol Arithmetische Operation Beispiel     + Addition int sum = 2 + 3;   - Subtraktion int difference = 5 – 2;   / Division int quotient = 15 / 5;   * Multiplikation int product = 3 * 4;   % Division mit Rest int remainder = 7 % 3;   ++ Post und Prä-Inkrement (1 addieren) count++; // (count = count + 1)   - - Post und Prä-Dekrement (1 subtrahieren) count--; // (count = count – 1)    Post- und Prä-Inkrement Das Inkrementieren und Dekrementieren von Variablen ist eine sehr häufige Operation. Von diesem Operator gibt es zwei Varianten:\n Er kann vor der Variable stehen, wie in ++i (Präfix-Schreibweise) oder dahinter, wie bei i++ (Postfix-Schreibweise)  Der Präfix-Operator verändert die Variable vor der Auswertung der Programmzeile, und der Postfix-Operator ändert sie nach der Auswertung der Programmzeile. Mit anderen Worten: Nutzen wir einen Präfix-Operator, so wird die Variable erst herauf- bzw. heruntergesetzt und dann der Wert geliefert. Und beim Post-Operator ist es genau umgekehrt.\nPostinkrement 1 2 3  int i = 5; int c = i++; // c = 5 // ab hier ist i = 6   Präinkrement 1 2  int i = 5; int d = ++i; // d = 6   Postdekrement 1 2 3  int i = 5; int e = i--; // e = 5 // ab hier ist i = 4   Prädekrement 1 2  int i = 5; int f = --i; // f = 4    Vegleichsoperatoren Die Ergebnisse dieser Operationen sind stets Boolean-Werte.\n   Symbol Vergleich Beispiel     \u003e grösser als 5 \u003e 4   \u003c kleiner als 4 \u003c 5   \u003e= grösser gleich 3 \u003e= 3   \u003c= kleiner gleich 3 \u003c= 3   == gleich 2 == 2   != ungleich 2 != 4    Boolsche Operatoren Diese Operatoren basieren auf der boolschen Algebra. Daher arbeiten boolsche Operatoren direkt mit boolschen Werten. Es gibt vier Arten von boolschen Operatoren. Schauen wir uns zunächst ihre Symbole und deren Inhalt in der folgenden Tabelle an, bevor wir erläutern, welche Funktionen sie ausführen.\n   Symbol Boolsche Operation Erklärung     \u0026\u0026 Logisches UND (AND) AND gibt nur dann true zurück, wenn die Ausdrücke auf beiden Seiten des Operators true sind (Hinweis: Dieser Ausdruck wird lazy evaluiert. Dies bedeuetet, wenn der erste Ausdruck false ist, wird der zweite Ausdruck nicht mehr ausgewertet   || Logisches ODER (OR) OR gibt true zurück, wenn der Ausdruck auf einer oder beiden Seiten des Operators true ist (Hinweis: Dieser Ausdruck wird lazy evaluiert. Dies bedeuetet, wenn der erste Ausdruck true ist, wird der zweite Ausdruck nicht mehr ausgewertet   ! Logisches NICHT (NOT) NOT kehrt den Wert des darauffolgenden booleschen Ausdrucks um. Aus true wird also false und umgekehrt   ^ Logisches ENTWEDER-ODER (XOR) XOR gibt true zurück, wenn die beiden Ausdrücke unterschiedlich sind   \u0026 Logisches UND (AND) Im Unterschied zum obigen AND wertet dieses immer beide Ausdrücke aus   | Logisches ODER (OR) Im Unterschied zum obigen OR wertet dieses immer beide Ausdrücke aus.     Kontrollstrukturen Kontrollstrukturen dienen dazu, den Ablauf eines Programms zu steuern. Damit bietet eine Kontrollstruktur die Möglichkeit, Programmteile nur unter gewissen Bedingungen ( → bedingte Anweisungen) auszuführen oder Programmteile zu wiederholen ( → Schleifen).\nBedingte Anweisungen Eine bedingte Anweisung ist eine Konstruktion, mit der ein Programm abhängig vom Wert eines boolschen Ausdrucks (true oder false) unterschiedliche Wege geht.\nIf-Statement Die einfachste Form der bedingten Anweisung besteht aus dem Schlüsselwort if, einem boolschen Ausdruck und einem Block.\n1 2 3  if (expression) { }   Wenn der Ausdruck true ist, werden die Anweisungen im Codeblock ausgeführt. Andernfalls werden sie übersprungen.\nIf-Else Statement Der obige if-Fall kann mit dem Schlüsselwort else erweitert werden, um alternative Aktionen auszuführen, wenn der Ausdruck false ist.\n1 2 3 4 5  if (expression) { // do something } else { // do something else }   Im folgenden Beispiel gibt das Programm je nach Wert von num (gerade oder ungerade) unterschiedlichen Text aus.\n1 2 3 4 5 6  int num = ...; // the num is initialized by some value if (num % 2 == 0) { System.out.println(\"It's an even number\"); } else { System.out.println(\"It's an odd number\"); }   Da eine Zahl nur gerade oder ungerade sein kann, wird nur eine der beiden Ausgaben gemacht.\nElse-If-Statements Ein Else-Statement kann durch ein If-Statement erweitert werden.\n1 2 3 4 5 6 7 8 9  if (expression0) { // do something } else if (expression1) { // do something else 1 } else if (expressionN) { // do something else N } else { // in all other cases: do this… }   Wenn also der erste Ausdruck false ist, wird der zweite Ausdruck überprüft, usw.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10  long dollars = ...; // your budget if (dollars \u003c 1000) { System.out.println(\"Buy a laptop\"); } else if (dollars \u003c 2000) { System.out.println(\"Buy a personal computer\"); } else if (dollars \u003c 100_000) { System.out.println(\"Buy a server\"); } else { System.out.println(\"Buy a data center or a quantum computer\"); }   Switch-Statement Die Switch-Anweisung bietet eine Möglichkeit, basierend auf dem Wert einer einzelnen Variablen (kein Ausdruck!) zwischen mehreren Fällen zu wählen. Die Variable kann eine Ganzzahl, ein Zeichen, eine Zeichenfolge oder eine Aufzählung sein.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  switch (variable) { case value1: // do something here break; case value2: // do something here break; //... other cases case valueN: // do something here break; default: // do something by default break; // it can be omitted }   Die Schlüsselwörter switch und case werden hier immer benötigt. Die Schlüsselwörter break und default sind optional. Das Schlüsselwort break verlässt die Switch-Anweisung. Wenn ein Fall nicht über das Keyword break verfügt, wird auch der darauffolgende Fall ausgewertet. Dies ist spannend, um die einzelnen Auswertungen verketten zu können. Der Default-Fall wird ausgewertet, wenn kein Fall mit dem Variablenwert übereinstimmt.\nSchleifen (Loops) Manchmal müssen wir einen Codeblock für eine bestimmte Anzahl wiederholen. Zu diesem Zweck stellt Java die Schleife bereit. Diese Schleife wird häufig verwendet, um über einen Wertebereich oder durch ein Array zu iterieren. For-Loops arbeiten mit einem Schleifenzähler, welcher sehr gut für Indizes von Arrays verwendet werden kann. Bei allen Schleifen ist Vorsicht geboten, da es rasch zu einer unendlichen Anzahl von Ausführungen kommen kann.\nFor-Loop 1 2 3  for (initialization; condition; modification) { // do something }    Bevor die Schleife beginnt, wird einmal die Initialisierungsanweisung (initialization) ausgeführt. Wir bezeichnen diese Variable als Schleifenvariable. Es sind mehrere Schleifenvariablen erlaubt, sie können durch Kommas getrennt werden. Die Bedingung (condition) ist ein boolscher Ausdruck, der die Notwendigkeit der nächsten Iteration bestimmt. Wenn die Auswertung der Bedingung false ist, wird die Schleife beendet – ansonsten folgt eine weitere Iteration Die Modifikation ist eine Anweisung, die den Wert der Schleifenvariablen verändert. Sie wird nach jeder Iteration aufgerufen. Normalerweise wird der Wert der Variable inkrementiert oder dekrementiert.  Beispiel:\n1 2 3 4 5  int n = 9; for (int i = 0; i \u003c= n; i++) { System.out.print(i + \" \"); } // Output: 0 1 2 3 4 5 6 7 8 9   Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten. Wie bei allen Blöcken sind die Schleifenvariablen nur innerhalb des Schleifenkörpers sichtbar. Die Schleifenvariable wird meistens mit einfachen Variablennamen wie i, j, k oder index benannt.\nHier ist ein weiteres Beispiel. Berechnen wir die Summe der Ganzzahlen von 1 bis 10 mit der for-Schleife.\n1 2 3 4 5 6 7 8 9  int startIncl = 1; int endExcl = 11; int sum = 0; for (int i = startIncl; i \u003c endExcl; i++) { sum += i; } System.out.println(sum); // Output: 55   For-Each Loop Der For-Each-Loop durchläuft alle Elemente eines Arrays oder einer Collection. Die Angaben aus dem For-Loop werden durch eine Schleifenvariable und ein Doppelpunkt ersetzt.\n1 2 3 4 5  int[] numbers = { 125, 381, 98, 12, 235 }; for (int number: numbers) { System.out.print(number + \" \"); } // Output: 125 381 98 12 235   Der gezeigte Loop wird also fünfmal ausgeführt und der Wert der Variable number nimmt bei jedem Durchlauf den jeweils nächsten Wert aus dem Array an.\nWhile-Loop Die while- Schleife besteht aus einem Codeblock und einer Bedingung (einem booleschen Ausdruck). Wenn die Bedingung erfüllt ist, wird der Code innerhalb des Blocks ausgeführt. Dieser Code wird solange wiederholt, bis die Bedingung nicht mehr erfüllt ist.\n1 2 3  while (condition) { // body: do something }   Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten.\nBeispiel: Die folgende Schleife gibt Ganzzahlen aus, während eine Variable kleiner als 5 ist.\n1 2 3 4 5 6 7  int i = 0; while (i \u003c 5) { System.out.print(i + \" \"); i++; } // Output: 0 1 2 3 4   Do-While Loop Die Do-While-Schleife besteht aus einem Codeblock und einer Bedingung (einem boolschen Ausdruck) am Ende. Im Gegensatz zur While-Schleife wird die Do-While-Schleife mindestens einmal ausgeführt, da die Bedingung am Ende steht.\n1 2 3  do { // body: do something } while (condition);   ","categories":"","description":"Java Grundlagen\n","excerpt":"Java Grundlagen\n","ref":"/training-sbb-puzzle/docs/java/java-grundlagen/","tags":"","title":"Java Grundlagen"},{"body":"1: Einleitung TODO: Beschreibung zu diesem Lab\n","categories":"","description":"Unit-Tests mit JUnit\n","excerpt":"Unit-Tests mit JUnit\n","ref":"/training-sbb-puzzle/labs/java/junit/","tags":"","title":"Lab JUnit-Tests"},{"body":" Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung von Dateien, die durch Linus Torvalds initiiert wurde.\n Inhalt  Was ist Versionsverwaltung Geschichte Name Wie funktioniert Git  Was ist Versionsverwaltung Eine Versionsverwaltung ist ein System, welches Änderungen an einer oder mehreren Dateien über die Zeit protokolliert, um die Entwicklung nachvollziehbar zu machen und womit man jederzeit auf bestimmte vorherige Versionen zugreifen kann.\nLokale Versionsverwaltung Eine lokale Versionsverwaltung hat wohl fast jeder schon mal bei sich eingesetzt. Die einfachste Version davon ist, wenn man zum Beispiel eine Datei kopiert und an der Kopie weiter arbeitet:\n1 2  [user@computer ~/gymi/arbeit/]$ ls matura_arbeit.docx matura_arbeit_fastfertig.docx matura_arbeit_wirklichfertig.docx matura_arbeit_wirklichfertig_formatiert.docx matura_final.docx   Dies ist jedoch sehr Fehleranfällig, da man schnell die falsche Datei erwischt. Aus diesem Grund, haben Programmierer bereits vor langer Zeit, lokale Versionsverwaltungssysteme entwickelt, die alle Änderungen an allen relevanten Dateien in einer Datenbank verwalten. Ein Beispiel dafür ist RCS\nZentrale Versionsverwaltung Um die Zusammenarbeit von mehreren Personen zu vereinfachen wurden zentrale Versionsverwaltungssysteme entwickelt. Diese Systeme basieren auf einem zentralen Server der alle Dateien verwaltet. User holen eine Datei ab (Auschecken oder engl. to check out) editieren sie und nur berechtigte User dürfen die Datei anschliessend wieder auf den Server stellen. Ein Beispiel dafür ist SVN\nVerteilte Versionsverwaltung Im Gegensatz zu zentralen Systeme wo der Benutzer nur den letzten Stand zur Verfügung hat, kopiert er bei verteilten Versionsverwaltungen eine vollständiger Klon des Repositories auf sein System und hat somit auch die komplette Geschichte lokal. Dies vereinfacht dem Entwickler das lokale arbeiten und erhöht die Ausfallsicherheit. Zusätzlich können solche System gut mit verschiedenen externen Repositories (Remotes) umgehen was die Zusammenarbeit weiter vereinfacht. Ein Beispiel dafür ist GIT\nGeschichte Git entstand aufgrund einer Lizenzänderung von BitKeeper, der Versionsverwaltung welche vom Linux Kernel bis 2005 verwendet wurde. Da die Kernel Entwickler die Software nicht mehr kostenlos nutzen konnten, entwickelten sie selber eine Lösung. Ziele der neuen Software waren Geschwindigkeit, einfaches Design, gute Unterstützung von nicht linearer Entwicklung, dezentrale Struktur und die Fähigkeit grosse Projekte effektiv zu verwalten. Git wird seit 2005 kontinuierlich weiterentwickelt.\nName Der Name „Git“ bedeutet in der britischen Umgangssprache so viel wie „Blödmann“. Linus Torvalds erklärte seine Wahl des ungewöhnlichen Namens mit einem Witz sowie damit, dass das Wort praktikabel und in der Softwarewelt noch weitgehend unbenutzt war:\n „Ich bin ein egoistischer Mistkerl, und ich benenne all meine Projekte nach mir. Zuerst ‚Linux‘, jetzt eben ‚Git‘.“\n – Linus Torvalds\nDazu muss man anmerken, dass Linus den Namen Linux nur widerwillig akzeptierte.\nWie funktioniert Git Git funktioniert im Gegensatz zu den meisten anderen Versionsverwaltungen nicht indem es eine Liste von Änderungen an einer Datei abspeichert, sondern eher wie ein Dateisystem, welches bei jedem Commit ein Snapshot aller Dateien anlegt. Um effizient zu bleiben, werden unveränderte Dateien nicht kopiert sondern nur verknüpft. Weiter stellt Git die Integrität aller verwalteten Dateien sicher, indem es eine Prüfsumme jeder Datei anlegt. Dies verunmöglicht Änderungen an Dateien, ohne dass es Git mitbekommen würde.\nDrei Zustände einer Datei Eine Datei in einem Git Repository kann drei (Haupt-) Zustände haben:\n Modified: Die Datei wurde geändert aber noch nicht in die lokale Datenbank eingecheckt. Staged: Die Datei wurde im aktuellen Zustand für den nächsten Commit vorgemerkt. Commited: Die Datei ist im aktuellen Zustand in die lokale Datenbank eingecheckt.  Minimaler Workflow Hat man ein Repository von einem anderen Rechner geklont, kann man eine oder mehrere Dateien im Verzeichnisbaum editieren. Anschliessend staged man diese Änderungen und commited diese anschliessend.\n","categories":"","description":"","excerpt":" Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung …","ref":"/training-sbb-puzzle/docs/git/was-ist-git/","tags":"","title":"Was ist Git"},{"body":"1: Introduction TODO: Beschreibung zu diesem Kapitel\n","categories":"","description":"Web Technologie lernen\n","excerpt":"Web Technologie lernen\n","ref":"/training-sbb-puzzle/docs/web/","tags":"","title":"Web"},{"body":"1: Introduction TODO: Beschreibung zu diesem Kapitel\n","categories":"","description":"Java Technologie lernen\n","excerpt":"Java Technologie lernen\n","ref":"/training-sbb-puzzle/docs/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"Labs zu Java\n","excerpt":"Labs zu Java\n","ref":"/training-sbb-puzzle/labs/java/","tags":"","title":"Java Labs"},{"body":"Git kann auf unterschiedliche Arten eingesetzt werden, es gibt graphische Oberflächen und die meisten Git-Server Software bieten Weboberflächen, welche das interagieren mit Git Repositories kinderleicht gestalten. Da diese Oberflächen meist sehr Produktspezifisch sind und oft auch nicht alle Funktionen beinhaltet werden hier nur die Kommandozeilen Befehle angeschaut. Ausserdem empfiehlt es sich mit git auf der Kommandozeile zu starten da es so viel verständlicher ist.\nInhalt  Konfiguration von Git Hilfe Ein Git Repository anlegen Änderungen verfolgen und im Repository speichern Anzeigen der Commit Historie Änderungen rückgängig machen Mit Remotes arbeiten  Konfiguration von Git Git kann, wie die viele Software unter Linux, auf unterschiedlichen Level konfiguriert werden:\n /etc/gitconfig enthält die Werte, welche für alle Benutzer auf dem System gelten. Die Datei kann mit git config --system gelesen oder editiert werden. Man braucht Administrator- oder Superuser-Rechte um die Datei zu editieren. ~/.gitconfig oder ~/.config/git/config enthält die Werte, welche für den aktuellen Benutzer konfiguriert sind. Mit git config --global können Werte gesetzt oder ausgelesen werden. Die Datei config im .git Verzeichnis innerhalb eines Repositories enthält die Konfiguration, welche nur für dieses Repository zählt. Das Flag für git config ist in diesem Fall --local, ist jedoch in der Regel die Standardoption und kann weggelassen werden.  Jede dieser Konfiguration wird von der nächsten überschrieben, sodass die Repository bezogene Konfiguration den höchsten Wert hat. Um zu die aktuelle Konfiguration und ihren Ursprung anzusehen kann folgender Befehl ausgeführt werden:\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ git config --list --show-origin file:/home/lehrling/.gitconfig user.email=lehrling@puzzle.ch file:/home/lehrling/.gitconfig user.name=Lehrling Puzzle file:/home/lehrling/.gitconfig push.default=simple file:/home/lehrling/.gitconfig merge.tool=meld file:.git/config core.repositoryformatversion=0 file:.git/config core.filemode=true file:.git/config core.bare=false file:.git/config core.logallrefupdates=true file:.git/config remote.origin.url=git@github.com:puzzle-bbt/training-sbb-puzzle.git file:.git/config remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* file:.git/config branch.master.remote=origin file:.git/config branch.master.merge=refs/heads/master   Konfigurationsbeispiele Nach der Installation von Git sollte als erstes der Name und die Email Adresse konfiguriert werden, da diese beiden Angaben bei jedem Commit benötigt werden:\n1 2  $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com   Wie wir bereits gelernt haben, schreiben wir mit dem --global Flag in die Konfiguration in unserem home Verzeichnis und sie gilt somit für alle Repositories, welche wir mit unserem User bearbeiten. Wollen wir dies fur ein bestimmtes Repo übersteuern, haben wir immer noch die Möglichkeit dies mit --local zu machen.\nEine weitere Konfiguration die evtl. hilfreich sein kann ist core.editor mit welcher, der Texteditor definiert werden kann. Git benutzt, falls hier nichts definiert ist, den standard Editor des Systems.\nHilfe Git bietet mehrere Möglichkeit, wie man an Hilfe gelangt, wenn mal einmal nicht weiter weiss:\n1 2 3 4 5  $ git help \u003cverb\u003e $ git \u003cverb\u003e --help $ man git-\u003cverb\u003e # Kurzversion: $ git \u003cverb\u003e -h   Wenn man also nicht mehr genau weiss, wie dies mit der Konfiguration von Git funktioniert kann man sich folgendermassen weiterhelfen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  $ git help config #ruft die Manpage auf [..] $ git config -h usage: git config [\u003coptions\u003e] Config file location --global use global config file --system use system config file --local use repository config file --worktree use per-worktree config file -f, --file \u003cfile\u003e use given config file --blob \u003cblob-id\u003e read config from given blob object Action --get get value: name [value-regex] --get-all get all values: key [value-regex] --get-regexp get values for regexp: name-regex [value-regex] --get-urlmatch get value specific for the URL: section[.var] URL --replace-all replace all matching variables: name value [value_regex] --add add a new variable: name value --unset remove a variable: name [value-regex] --unset-all remove all matches: name [value-regex] --rename-section rename section: old-name new-name --remove-section remove a section: name -l, --list list all -e, --edit open an editor --get-color find the color configured: slot [default] --get-colorbool find the color setting: slot [stdout-is-tty] Type -t, --type \u003c\u003e value is given this type --bool value is \"true\" or \"false\" --int value is decimal number --bool-or-int value is --bool or --int --path value is a path (file or directory name) --expiry-date value is an expiry date Other -z, --null terminate values with NUL byte --name-only show variable names only --includes respect include directives on lookup --show-origin show origin of config (file, standard input, blob, command line) --show-scope show scope of config (worktree, local, global, system, command) --default \u003cvalue\u003e with --get, use default value when missing entry   Ein Git Repository anlegen Um lokal ein neues Git Repository anzulegen gibt es zwei Varianten:\n Umwandeln eines Verzeichnis, welches (noch) nicht mit Git verwaltet wird zu einem Git Repository Klonen eines existierenden Repositories von einem anderen Ort  Ein Verzeichnis zu einem Git Repository verwandeln Um aus einem Ordner ein Git Repository zu erstellen, muss man zuerst in den Ordner wechseln und anschliessend das Repository initialisieren:\n1 2  $ cd ~/path/to/folder $ git init   Der zweite Befehl erzeugt ein .git Unterverzeichnis, welches die Repository Daten beinhaltet. Im Moment werden noch keine Dateien von Git verwaltet, sondern die müssen zuerst hinzugefügt (git add) werden und committed werden (git commit). Wenn wir von einem leeren Ordner aus gehen, müssen die Dateien natürlich zuerst noch erstellt werden:\n1 2 3  $ vim README.md $ git add README.md $ git commit -m 'Initial Commit'   Ein bestehendes Repository klonen Um ein Repository zu klonen wird der Befehl git clone verwendet:\n1 2 3  $ git clone https://github.com/libgit2/libgit2 $ ls libgit2   Git legt dann automatisch ein Verzeichnis libgit2 an mit allen Dateien und initialisiert das Repository mit einem .git Verzeichnis im Hauptverzeichnis. Wird hinter der URL noch etwas angegeben, wird dies als Name des Zielverzeichnisses interpretiert:\n1 2 3  $ git clone https://github.com/libgit2/libgit2 mylibgit $ ls mylibgit   Änderungen verfolgen und im Repository speichern Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:\n Untracked: Die Datei liegt im Ordner, wird aber nicht von Git versioniert Unmodified: Die Datei wird von Git versioniert, sie ist seit dem letzten Commit unverändert. Modified: Die Datei wurde seit dem letzten Commit verändert Staged: eine neue oder editierte Datei wurde für den nächsten Commit vorgemerkt.  Der Befehl zum überprüfen, ob man Dateien in einem anderen Zustand als unmodified hat ist git status:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ git status On branch feature/git-basics Your branch is up to date with 'origin/feature/git-basics'. Changes to be committed: (use \"git restore --staged \u003cfile\u003e...\" to unstage) modified: content/en/docs/02.0/02.md Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git restore \u003cfile\u003e...\" to discard changes in working directory) modified: content/en/docs/02.0/02.md Untracked files: (use \"git add \u003cfile\u003e...\" to include in what will be committed) .gitignore   Wollen wir nun die Änderungen der Datei content/en/docs/02.0/02.md (oder die Datei .gitignore) zum nächsten Commit hinzufügen können wir dies mit git add \u003cpfad/zur/datei\u003e. Im Beispiel oben sehen wir, dass die Datei content/en/docs/02.0/02.md bereits gestaged ist. Ändern wir diese Datei erneut, wird die Datei sowohl bei Changes to be committed: wie auch bei Changes not staged for commit: auftauchen. Einmal mit den Änderungen, welche wir bereits gestaged haben und einmal mit den Änderungen, welche wir nach dem Stagen (git add) gemacht haben. Wollen wir beide Änderungen im gleichen Commit, können wir die Datei einfach wieder mit git add stagen und anschliessend commiten, wollen wir die Änderungen in separaten Commit, commiten wir zuerst die gestagten Änderungen und stagen anschliessend die zweite Änderungen und commiten erneut.\n.gitignore Bevor wir lernen, wie man seine Änderungen commited wollen wir noch kurz die spezielle Datei .gitignore anschauen. In dieser Datei können Dateien erfasst werden, welche Git nicht als untracked aufzählen soll, respektive ignorieren soll. Die Datei wird ganz normal wie jede andere auch ins Repo eingecheckt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  $ cat .gitignore # ignore all .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in any directory named build build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory and any of its subdirectories doc/**/*.pdf   Weitere Informationen bekommt man mit man gitignore oder unter https://github.com/github/gitignore findet man nützliche Beispiele.\nÜberprüfen der Änderungen Bevor man seine Änderungen commited, empfiehlt es sich diese nochmals zu überprüfen. Mit git status sieht man, welche Dateien geändert wurden, jedoch nicht, was sich geändert hat. Dafür gibt es den Befehl git diff:\n1 2 3 4 5 6 7 8 9 10  diff --git a/content/en/docs/02.0/02.md b/content/en/docs/02.0/02.md index 1e6db46..dd7161b 100644 --- a/content/en/docs/02.0/02.md +++ b/content/en/docs/02.0/02.md @@ -145,3 +145,60 @@ mylibgit  ## Änderungen verfolgen und im Repository speichern +Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben: -Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustaende haben   git diff vergleicht die Änderungen welche noch nicht gestaged wurden, will man bereits gestagte Änderungen überprüfen braucht es zusätzlich das Flag --staged oder --cached (die beiden Flags sind Synonyme).\nCommiten Ist man sicher, dass man nur die Änderungen gestaged hat, welche man auch commiten will, kann man dies mit dem Befehl git commit bewerkstelligen. Dadurch wird ein Editor geöffnet und man wird gebeten eine Beschreibung für die Änderungen anzugeben. Wie solche Beschreibungen gestaltet werden sollen und was alles in eine “Commit Message” gehört, darüber gibt es ganz unterschiedliche Meinungen. Idealerweise probiert man sich vorzustellen, was man an Zusätzlichen Informationen braucht, wenn man die Änderungen in zwei Jahren wieder anschaut, um zu verstehen, was und warum das geändert wurde.\nOft gibt es pro Projekt Konventionen wie eine Commit Message aussehen soll. Falls dies nicht existiert gibt es ein paar wenige Punkte welche die Messages einiges lesbarer und verständlicher machen:\n Sprache: Englisch Kurze und prägnante Message, idealerweise unter 50 Zeichen Details Mit Grossbuchstaben beginnen Details Kein Punkt am Schluss Details Den imperative mood (Befehlsform) verwenden, also «Fix bug with X» statt «Fixed bug with X» oder «More fixes for broken stuff» Details Wenn vorhanden das Ticket referenzieren:  Bei Gitlab/Github Issues: «Add X #12345»    (Puzzle Docs)\nWeitere Quellen dazu:\n https://chris.beams.io/posts/git-commit/ https://www.conventionalcommits.org/en/v1.0.0/  Ein paar hilfreiche Flags zu git commit:\n -m um eine Message gleich anzugeben und nicht den Editor zu öffnen (kann je nach Commit Message Guideline hinderlich sein, da es keine Multiline Kommentare erlaubt):  1 2 3 4  git commit -m \"Story 182: added important Information to Readme\" [master 463dc4f] Story 182: added important Information to Readme 2 files changed, 2 insertions(+) create mode 100644 README     -a um alle editierten Dateien gleich mitzustagen. (Kurzform von git add --all \u0026\u0026 git commit) !ACHTUNG! kann gefährlich sein da so schnell Änderungen in einen Commit rutschen die nicht rein gehören!\n  -v um ein git diff --staged im Editor angezeigt zu bekommen. So muss man sich nicht merken, was man eigentlich geändert hat und bekommt es beim schreiben der Commit Message noch einmal präsentiert.\n  WICHTIG: Es ist einiges einfacher Fehler vor dem Commiten als nach dem Commiten zu beheben, ein zweites mal über die Änderungen schauen ist sehr empfehlenswert!\nDateien löschen Um eine Datei zu löschen muss diese zuerst entfernt und dann gestaged werden, damit dies in der Git Datenbank ankommt. Um nicht zuerst rm foo und dann git add foo eingeben zu müssen, gibt es den Befehl git rm foo. Will man eine bereits gestagte Datei aus der Versionsverwaltung jedoch nicht vom Filesystem löschen, weil man diese zum Beispiel im .gitignore ergänzen möchte, dann kann man dies mit git rm --cached foo erledigen.\nWICHTIG: Jede Datei die irgendwann mal commited wurde ist für immer in der Git Geschichte und kann nur durch neu schreiben der selbigen wieder entfernt werden. Wer also zum Beispiel sein Passwort commited weil dies in einer secret.yml Datei steht, der sollte sich sofort bei einem 10x-Git-Profi-Engineer Hilfe holen.\nDateien Verschieben Genauso wie löschen, muss auch beim Verschieben die Änderung Git mitgeteilt werden: mv README.md README \u0026\u0026 git rm README.md \u0026\u0026 git add README oder in kurz und hübsch: git mv README.md README.\nAnzeigen der Commit Historie Um die Geschichte eines Git Repositories anzuzeigen gibt es den Befehl git log. Ohne Argumente zeigt git log die Commits in umgekehrter chronologischer Reihenfolge, sprich jüngster Commit zuoberst. Pro Commit wird jeweils der Commit-Hash, der Name und Email Adresse des Authors, das Datum und die Commit-Message angezeigt. Um die effektiven Änderungen anzuzeigen gibt es das -p oder --patch Flag verwendet werden. Da der Output schnell gross wird und man wahrscheinlich auch nicht bis an den Ursprung der Geschichte zurück will empfiehlt es sich die Anzahl Commits anzugeben, will man zum Beispiel die letzten drei Commits anschauen macht man dies mit -3. Oder man schränkt die Änderungen basierend auf die Zeit ein mit --since= und --until= ein (es werden die unterschiedlichsten Zeitangaben akzeptiert, am besten probiert man etwas aus. Bsp: --since=2.weeks oder --until=\"2020-06-03\"). Auch mit --grep oder --author kann man die Resultate einschränken. Weitere Information liefert die Manpage man git log und die Hilfefunktion git log -h.\nÄnderungen rückgängig machen Wo gehobelt wird fallen Späne. Die meisten Schnitzer kann man jedoch selber wieder ausglätten. Am häufigsten committed man wohl zu schnell, hat eine Datei vergessen dazuzufügen oder hat sich bei der Commit Message vertan. Hier kann man ganz einfach die Änderungen noch vornehmen und an den letzten Commit berichtigen mit git commit --amend (Wichtig, man editiert nicht den letzten Commit, sondern man löscht ihn und erstellt eine korrigierte neue Version davon. Dies kann dazuführen, dass ein Remote den Commit nicht mehr annimmt, da die History nicht mehr übereinstimmt. Aber mehr dazu später.)\nUm eine gestagte Datei wieder zu modified (aber eben nicht gestaged) zu verschieben kann man git reset HEAD \u003cfile\u003e verwenden. Um die Änderungen einer Datei rückgängig zu machen (also modified zu unmodified) kann sie neu ausgecheckt werden mit git checkout -- \u003cfile\u003e. Achtung Alle Änderungen seit dem letzte Commit gehen damit verloren!!! Wenn man sich an die beiden Befehle gerade mal nicht erinnern kann, dann kann man einfach ein git status eingeben und den Hilfetext studieren 😉.\nMit Remotes arbeiten Um mit anderen an einem Git-Projekt mitarbeiten zu können, braucht es Remotes, sprich eine Version des Projekts im Netzwerk, wo alle Beteiligten ihre Änderungen hin pushen und die Änderungen der Anderen pullen können.\nNachdem man ein Repo gecloned hat sieht man ein Remote, man kann jedoch auch weitere definieren:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  $ git clone git@github.com:puzzle-bbt/training-sbb-puzzle.git Cloning into 'training-sbb-puzzle'... remote: Enumerating objects: 8485, done. remote: Counting objects: 100% (8485/8485), done. remote: Compressing objects: 100% (5276/5276), done. remote: Total 8485 (delta 3095), reused 8456 (delta 3079), pack-reused 0 Receiving objects: 100% (8485/8485), 17.06 MiB | 5.11 MiB/s, done. Resolving deltas: 100% (3095/3095), done. $ cd training-sbb-puzzle $ git remote origin $ git remote -v origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (fetch) origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (push) $ git remote add private git remote add private git@github.com:Lehrling/training-sbb-puzzle.git $ git remote -v origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (fetch) origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (push) private\tgit@github.com:Lehrling/training-sbb-puzzle.git (fetch) private\tgit@github.com:Lehrling/training-sbb-puzzle.git (push)   Wollen wir nun alle Information holen, welches der Lehrling hat, jedoch noch nicht im Repo sind kann man dies mit git fetch private ausführen.\nFetching und Pulling Es gibt zwei Arten, wie man Daten von einem Remote abholen kann, nach dem man das Repo gecloned hat.\n  git fetch \u003cremote\u003e: holt alle Änderungen vom Remote seit dem letzten abholen und speichert die lokal. Wichtig zu beachten ist, dass git fetch die Änderungen nicht mit den lokalen Änderungen zusammenfügt, sondern dies manuell ausgeführt werden muss.\n  git pull: Wenn der lokale Branch mit einem remote Branch verknüpft ist, holt git pull die Änderungen dieses remotes und fügt sie gleich mit den Änderungen im lokalen Branch zusammen (merge). Was Branches sind und wie ein Merge funktioniert schauen wir uns in kürze an, nur soviel, wird ein Repo gecloned, wird der lokale sogenannte master Branch mit dem master Branch des origin Remotes verknüpft.\n  Pushen Wenn man seine Änderungen soweit hat, dass man sie mit dem Rest vom Team teilen will, dann kann man diese mit git push \u003cremote\u003e \u003cbranch\u003e auf den Server laden. Dies funktioniert jedoch nur, wenn man auf dem Server auch Schreibrechte hat und niemand anderes vor einem gepusht hat.\n","categories":"","description":"","excerpt":"Git kann auf unterschiedliche Arten eingesetzt werden, es gibt …","ref":"/training-sbb-puzzle/docs/git/git-basics/","tags":"","title":"Git Basics"},{"body":"Ziele  Ich kenne die Grundlagen von Maven Ich kann Maven lokal konfigurieren Ich kann im Artifactory Abhängigkeiten suchen und diese verwenden Ich kenne die Grundlagen von Project Object Models (pom) Ich kenne die wichtigsten Maven Befehle und kann diese auf der Kommandozeile anwenden Ich kann die Abhängigkeiten meiner Applikationen mit Maven verwalten Ich kann Maven Plugins konfigurieren und damit meinen Maven-Build steuern Ich kann den Begriff Continuous Integration erklären Ich kenne die Komponenten der Deployment-Pipeline und deren Aufgaben  Änderungskontrolle    Autor Version Datum Änderungen     Claudio Zesiger 0.1 Mai 2020 Initiale Version erstellt   Claudio Zesiger 0.2 27.08.2020 * Modul erweitert   Claudio Zesiger 0.3 14.10.2020 * Modul erweitert    Voraussetzungen  Gute Grundlagenkenntnisse von Java-Anwendungen   Maven Allgemeine Informationen Apache Maven ist ein Build-Management Tool. Von einer einzelnen Datei aus, kann Maven den Build eines Projektes steuern. Diese zentrale Datei ist das Project Object Model, kurz auch POM genannt. Der Build eines Projektes kann dabei von einfacher Kompilierung bis zur Auslieferung einer Anwendung auf eine bestimmte Plattform reichen.\nDamit Maven funktionieren kann, benötigt ein Projekt die folgenden Dinge:\n Eine Maven-Installation, entweder separat oder Built-In wie beispielsweise in der IntelliJ IDEA Eine POM-Datei pro Projekt oder Modul (es handelt sich um eine XML-Datei) Ein zentrales Maven-Repository Ein lokales Maven-Repository Eine Konfigurationsdatei mit dem Namen settings.xml   pom.xml Der Aufbau eines POM kann grob in folgenden Abschnitte unterteilt werden, hier erklärt an einem umfangreichen Beispiel.\nu003c!-- (1) Header --\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003c!-- (2) Angaben zum Artefakt --\u003e \u003cgroupId\u003ech.sbb.interviewtool\u003c/groupId\u003e \u003cartifactId\u003einterviewtool-backend\u003c/artifactId\u003e \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e \u003cpackaging\u003ejar\u003c/packaging\u003e \u003c!-- (3) Angaben zum Parent-Projekt --\u003e \u003cparent\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-parent\u003c/artifactId\u003e \u003cversion\u003e2.2.4.RELEASE\u003c/version\u003e \u003crelativePath/\u003e \u003c/parent\u003e \u003c!-- (4) Properties --\u003e \u003cproperties\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cjava.version\u003e1.8\u003c/java.version\u003e \u003cmaven.build.timestamp.format\u003eyyyy-MM-dd HH:mm\u003c/maven.build.timestamp.format\u003e \u003ctimestamp\u003e${maven.build.timestamp}\u003c/timestamp\u003e \u003citext.version\u003e7.1.2\u003c/itext.version\u003e \u003c/properties\u003e \u003c!-- (5) Abhängigkeiten --\u003e \u003cdependencies\u003e \u003c!-- Spring Boot --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web-services\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-security\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-jpa\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-actuator\u003c/artifactId\u003e \u003c/dependency\u003e \u003c!-- Spring --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-webmvc\u003c/artifactId\u003e \u003c/dependency\u003e \u003c!-- Lombok --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e \u003cartifactId\u003elombok\u003c/artifactId\u003e \u003cversion\u003e1.18.6\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Datenbank --\u003e \u003cdependency\u003e \u003cgroupId\u003emysql\u003c/groupId\u003e \u003cartifactId\u003emysql-connector-java\u003c/artifactId\u003e \u003cversion\u003e8.0.20\u003c/version\u003e \u003c/dependency\u003e \u003c!-- iText --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.itextpdf\u003c/groupId\u003e \u003cartifactId\u003ekernel\u003c/artifactId\u003e \u003cversion\u003e${itext.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.itextpdf\u003c/groupId\u003e \u003cartifactId\u003eio\u003c/artifactId\u003e \u003cversion\u003e${itext.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.itextpdf\u003c/groupId\u003e \u003cartifactId\u003elayout\u003c/artifactId\u003e \u003cversion\u003e${itext.version}\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Unit- und Integrationstests --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.h2database\u003c/groupId\u003e \u003cartifactId\u003eh2\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c!-- (6) Build-Informationen --\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003ccompilerVersion\u003e1.8\u003c/compilerVersion\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c!-- (7) Auslieferung --\u003e \u003cdistributionManagement\u003e \u003crepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/cca.mvn/\u003c/url\u003e \u003c/repository\u003e \u003csnapshotRepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/cca.mvn/\u003c/url\u003e \u003c/snapshotRepository\u003e \u003c/distributionManagement\u003e \u003c!-- (8) Maven-Repositories --\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003eitext-releases\u003c/id\u003e \u003cname\u003eiText Repository - releases\u003c/name\u003e \u003curl\u003ehttps://repo.itextsupport.com/releases\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003c!-- (9) Entwickler-Informationen --\u003e \u003cdevelopers\u003e \u003cdeveloper\u003e \u003cid\u003eU232509\u003c/id\u003e \u003cname\u003eBenjamin Schaffner\u003c/name\u003e \u003cemail\u003ebenjamin.schaffner@sbb.ch\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eProduct Owner\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003cdeveloper\u003e \u003cid\u003eU210148\u003c/id\u003e \u003cname\u003eClaudio Zesiger\u003c/name\u003e \u003cemail\u003eclaudio.zesiger@sbb.ch\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eSoftware Architect\u003c/role\u003e \u003crole\u003eLead Developer\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003cdeveloper\u003e \u003cid\u003eU233432\u003c/id\u003e \u003cname\u003eNikola Milicic\u003c/name\u003e \u003cemail\u003enikola.milicic@sbb.ch\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eBackend Developer\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003cdeveloper\u003e \u003cid\u003eE515732\u003c/id\u003e \u003cname\u003eSamuel Allen\u003c/name\u003e \u003cemail\u003esamuel_lucas.allen@sbb.ch\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eFull-Stack Developer\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003c/developers\u003e \u003c/project\u003e   Abschnitt 1 Der Header einer POM-Datei bleibt grundsätzlich so wie dargestellt. Die Angaben zum Schema sind dabei optional. Falls andere Schemas verwendet werden, so sind diese hier zu deklarieren.\nAbschnitt 2 Die Angaben zum Artefakt enthalten die folgenden Informationen:\n Gruppen-ID: Normalerweise eine umgekehrte URL, also beispielsweise ch.sbb.interviewtool. Darin sollte der Projektname enthalten sein Artefakt-ID: Der Name des Projekts Version: Die momentane Version des Projekts, diese wird später durch Releases verändert Paketierung: Angabe, in welcher Form das Artefakt geliefert wird. Der Default ist Java Archive (JAR)  Abschnitt 3 Falls das Projekt Teil eines anderen Projektes ist, müssen hier die Artefakt-Angaben des sogenannten Parent-Projekts hinterlegt werden.\nAbschnitt 4 Die Einstellungen in Maven sind beliebig wählbare Tags. So kann beispielsweise eine bestimmte Einstellung oder eine Version definiert werden. Beispiel:\n1  \u003cspecial.setting\u003especial\u003c/special.setting\u003e   Innerhalb der POM-Datei kann dann mit\n1  ${special.setting}   auf die Einstellung und damit auf deren Wert (special) zugegriffen werden.\nAbschnitt 5 Abhängigkeiten zu Fremdbibliotheken. Diese sollten stets Gruppen-ID, Artefakt-ID und Version enthalten. Der Typ der Abhängigkeit gibt an, um welche Art von Bibliothek es sich handelt. Nicht alle Java-Bibliotheken werden als JAR ausgeliefert. Mögliche Typen sind hier zu finden: https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html Vielfach wird auch noch der Scope verwendet, er gibt an in welchem Umfang die Fremdbibliothek miteinbezogen wird. Mögliche Scopes sind:\n compile - Das ist der Default-Scope. Bibliotheken sind in allen Klassenpfaden verfügbar (Classpath) provided - Gleich wie compile, ausser das die Bibliothek zur Laufzeit von einem Container (wie dem JDK) erwartet wird runtime - Zeigt an, dass die Bibliothek zur Kompilierung nicht verwendet wird. Zur Laufzeit steht sie dann zur Verfügung test - Die Bibliothek steht nur für Tests zur Verfügung system - Gleich wie provided, mit der Ausnahme, dass die Bibliothek explizit auf dem System zur Verfügung stehen muss  Abschnitt 6 Die Build-Informationen konfigurieren den Ablauf des Maven-Builds. Mit Plugins kann der Build selbst durch spezifische Erweiterungen beliebig angepasst werden. Es stehen sehr viele Plugins für Maven zur Verfügung, eine Übersicht gibt es hier: https://maven.apache.org/plugins/index.html\nAbschnitt 7 Die Auslieferungs-Sektion bestimmt, wo die Artefakte nach dem Build abgelegt werden sollen.\nAbschnitt 8 Die Angabe von zusätzlichen Maven-Repositories für den Build ist notwendig, wenn die gewünschten Abhängigkeiten im SBB-Repository nicht verfügbar sind.\nAbschnitt 9 Die Entwickler-Informationen dienen dazu, an der Entwicklung beteiligte Personen zu identifizieren.\n settings.xml Zur Konfiguration von Maven muss eine Einstellungsdatei angelegt werden. Diese Datei sollte immer settings.xml heissen und sich im Verzeichnis C:\\Users\\\\.m2. befinden. Bitte beachten, dass das Verzeichnis mit einem Punkt im Namen beginnt. Sie sollte folgenden Inhalt aufweisen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  \u003csettings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e \u003cservers\u003e \u003cserver\u003e \u003cid\u003emvn\u003c/id\u003e \u003cconfiguration\u003e \u003chttpHeaders\u003e \u003cproperty\u003e \u003cname\u003eX-JFrog-Art-Api\u003c/name\u003e \u003cvalue\u003eREPOSITORY-KEY\u003c/value\u003e \u003c/property\u003e \u003c/httpHeaders\u003e \u003c/configuration\u003e \u003c/server\u003e \u003c/servers\u003e \u003cmirrors\u003e \u003cmirror\u003e \u003cmirrorOf\u003e*\u003c/mirrorOf\u003e \u003cname\u003emvn\u003c/name\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/mvn\u003c/url\u003e \u003cid\u003emvn\u003c/id\u003e \u003c/mirror\u003e \u003c/mirrors\u003e \u003cproxies\u003e \u003cproxy\u003e \u003cid\u003ezscaler\u003c/id\u003e \u003cactive\u003etrue\u003c/active\u003e \u003cprotocol\u003ehttps\u003c/protocol\u003e \u003chost\u003ezscaler.sbb.ch\u003c/host\u003e \u003cport\u003e10465\u003c/port\u003e \u003cnonProxyHosts\u003erepo.sbb.ch|bin.sbb.ch\u003c/nonProxyHosts\u003e \u003c/proxy\u003e \u003c/proxies\u003e \u003cprofiles\u003e \u003cprofile\u003e \u003cid\u003eproperties\u003c/id\u003e \u003cproperties\u003e \u003ctycho.disableP2Mirrors\u003etrue\u003c/tycho.disableP2Mirrors\u003e \u003c/properties\u003e \u003c/profile\u003e \u003cprofile\u003e \u003cid\u003edefault\u003c/id\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003cname\u003ecentral.sbb.releases\u003c/name\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/mvn\u003c/url\u003e \u003creleases\u003e \u003cenabled\u003etrue\u003c/enabled\u003e \u003cupdatePolicy\u003enever\u003c/updatePolicy\u003e \u003c/releases\u003e \u003csnapshots\u003e \u003cenabled\u003etrue\u003c/enabled\u003e \u003cupdatePolicy\u003ealways\u003c/updatePolicy\u003e \u003c/snapshots\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003cpluginRepositories\u003e \u003cpluginRepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003cname\u003ecentral.sbb.plugins\u003c/name\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/mvn\u003c/url\u003e \u003clayout\u003edefault\u003c/layout\u003e \u003csnapshots\u003e \u003cenabled\u003etrue\u003c/enabled\u003e \u003cupdatePolicy\u003ealways\u003c/updatePolicy\u003e \u003c/snapshots\u003e \u003creleases\u003e \u003cenabled\u003etrue\u003c/enabled\u003e \u003cupdatePolicy\u003enever\u003c/updatePolicy\u003e \u003c/releases\u003e \u003c/pluginRepository\u003e \u003c/pluginRepositories\u003e \u003c/profile\u003e \u003c/profiles\u003e \u003cactiveProfiles\u003e \u003cactiveProfile\u003edefault\u003c/activeProfile\u003e \u003c/activeProfiles\u003e \u003c/settings\u003e   Auf Zeile 11 muss der persönliche Repository-Schlüssel (REPOSITORY-KEY) eingefügt werden. Um diesen Schlüssel zu generieren, müssen die folgenden Schritte ausgeführt werden:\n   # Beschreibung     1 https://bin.sbb.ch/artifactory/webapp/#/home öffnen   2 Oben rechts auf “Log In” klicken   3 Anmelden   4 Oben rechts auf die eigene Personalnummer klicken   5 Passwort eingeben und auf “Unlock” klicken   6 Im Bereich der “Authentication Settings” einen neuen API Key generieren lassen und diesen gleich mit dem Kopier-Button in die Zwischenablage kopieren.   7 Den API Key in die settings.xml Datei einfügen und die Datei speichern.    Der Verbindung zwischen Artifactory und IntelliJ steht nun nichts mehr im Weg :-)\n IntelliJ IDEA einrichten Im IntelliJ findet man in den allgemeinen Einstellungen auch die Einstellungen für Maven. Die wichtigsten Einstellungen sind:\n   Einstellung Beschreibung     Maven home directory Zeigt auf das Verzeichnis einer Maven-Installation. Das IntelliJ verfügt bereits über eine Maven-Installation, diese wird als “Bundled” bezeichnet   User settings file Die XML-Datei, welche weiter oben angelegt wurde   Local repository Der Ablageort für das lokale Repository    Bei diesen Einstellungen muss überprüft werden, dass die Angaben für die XML-Datei und das lokale Repository korrekt sind.\n Repository Lokal Zwischen dem JFrog Artifactory und deinem lokalen Repository gibt es also nun eine Verbindung. Sobald dein Projekt (in der Datei pom.xml) bestimmte Abhängigkeiten definiert, werden diese über das Artifactory aufgelöst und die entsprechenden Artefakte werden in dein lokales Repository heruntergeladen.\nBeispiel: In meiner pom.xml Datei definiere ich die folgende Abhängigkeit zu der Fremdbibliothek von Lombok\n1 2 3 4 5 6  \u003c!-- Lombok --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e \u003cartifactId\u003elombok\u003c/artifactId\u003e \u003cversion\u003e1.18.12\u003c/version\u003e \u003c/dependency\u003e   Sobald ich die pom.xml Datei speichere, wird das angeforderte Artefakt durch die oben eingerichtete Verbindung im Artifactory gesucht. Dieser Vorgang kann auch manuell gemacht werden. Dazu kann man sich auf https://bin.sbb.ch einloggen.\nAuf der Seite können mit dem Suchfeld bestimmte Artefakte gesucht werden. Als Stichwort reicht ein Teil des Names des gesuchten Artefakts. Die angezeigten Resultate lassen sich durch einen Klick auf die Tabellen-Header sortieren. Ich habe die Sortierung nach Modifizierungsdatum gewählt Wie wir sehen gibt es die von uns gewünschte Lombok-Version 1.18.12 als verschiedene Artefakte: javadoc, sources, pom und jar. Wir können auch sehen, dass es bereits eine neuere Version gibt 1.18.14.\nDer angeforderte Artefakt wird nun in das lokale Repository heruntergeladen, wir müssten ihn dort also finden können. Die Artefakte sind nach Packages abgelegt. Beim Lombok-Artefakt fordern wir ja die Group-ID “org.projectlombok” an. Unter diesem Verzeichnis müsste das Artefakt nun zu finden sein: Das Artefakt wird unterhalb der Group-ID noch in einem Ordner mit der Artifact-ID abgelegt. Innerhalb dieses Verzeichnisses werden alle bisher angeforderten Versionen von Lombok abgelegt. Die beiden Dateien mit der endung “lastUpdated” dienen dem Maven zur Kontrolle der letzten Synchronisierung.\nRemote (JFrog / Artifactory) Das Artifactory von JFrog ist das verwaltete Verzeichnis zur Speicherung und Beschreibung digitaler Objekte. Es ist also unser digitales Archiv bei der SBB. In diesem Archiv befinden sich Millionen von Fremdbibliotheken in unterschiedlichsten Versionen. Zudem werden alle Versionen von unseren ausgelieferten Applikationen dort archiviert.\n Commands Maven lässt sich auf der Kommandozeile oder im IntelliJ-Terminal ausführen. Damit wir sehen, ob das wirklich klappt könnt ihr das Terminal öffnen und den Befehl\n1  mvn -version   eingeben. Das sollte nun in etwa so aussehen: Bevor wir die einzelnen Befehle kurz anschauen werfen wir einen Blick auf die einzelnen Phasen des Maven-Lebenszyklus. Jeder der in der Grafik genannten Befehle wird zusätzlich die vorangehenden Befehle ausführen. Die Ausführung von “mvn package” wird also die Phasen validate, compile, test und package ausführen.\nhelp 1  mvn -help   Das Ergebnis dürfte klar sein. Maven listet alle möglichen Befehle auf.\ndependency:tree 1  mvn dependency:tree   Dieser Befehl listet alle Abhängigkeiten zu Fremdbibliotheken als Baum auf. Das ist grundsätzlich sehr praktisch wenn man doppelte Abhängigkeiten erkennen/vermeiden will.\nclean 1  mvn clean   Dieser Befehl löscht alle vorherigen lokale Maven-Builds, indem er das Verzeichnis “target” löscht.\ncompile 1  mvn compile   Kompiliert den Sourcecode je nach Abhängigkeit von Plugins. Wenn also beispielsweise ein Maven-Compiler-Plugin verwendet wird, so wird dieses als Regelwerk für die Kompilierung herangezogen.\ntest 1  mvn test   Führt alle Tests aus. In einem Java-Projekt sind dies beispielsweise alle Unit-Tests mit jUnit.\npackage 1  mvn package   Führt einen lokalen Maven-Build aus, startet alle Tests und paketiert die Anwendung (normalerweise als JAR) in das Verzeichnis “target”.\nverify 1  mvn verify   Prüft die Testergebnisse aller ausgeführten Integrationstests, normalerweise wird das Maven-Failsafe-Plugin für diesen Maven-Befehl vorausgesetzt.\ninstall 1  mvn install   “Installiert” den Artefakt im lokalen Maven-Repository.\ndeploy 1  mvn deploy   “Installiert” den Artefakt im Remote-Repository (Artifactory)\nDie Maven-Befehle lassen sich kombinieren. Sehr nützlich ist zum Beispiel:\n1  mvn clean install   Selbstverständlich gibt es sehr viele Optionen für die einzelnen Maven-Befehle.\n Continuous Integration Kontinuierliche Integration beschreibt den Prozess der fortlaufenden Zusammenfügung von Einzelkomponenten zu einer Anwendung. Das Ziel dabei ist stets die Steigerung der Qualität einer Software. Inhaltlich wird nicht nur die Software zusammengebaut, es können auch Tests durchgeführt oder Messungen der Code-Qualität vorgenommen werden. Der Auslöser ist stets das Hochladen (Einchecken) von Änderungen am Programmcode in die Versionsverwaltung. Eine Weiterentwicklung der kontinuierlichen Integration stellt die kontinuierliche Auslieferung (Continuous Delivery) dar, dort wird in bestimmten Zeitabständen, bei Erreichen einer bestimmten Qualität oder manuell eine neue Version der Software auf eine Zielplattform ausgeliefert.\n Grundsätze    Grundsatz Beschreibung     Versionsverwaltung Gemeinsame Codebasis für alle Projektbeteiligten   Statische Code-Analyse Einheitlich definierte Qualität der Applikation   Kontinuierliche Test-Entwicklung Änderungen an der Software sind durch entsprechende Unit-Tests abzudecken   Häufige Integration Code-Review durchführen und Änderungen möglichst rasch einchecken. Kleiner Stack an offenen Pull-Requests   Integration Develop Nahe am Develop-Branch entwickeln   Kurze und häufige Testzyklen Häufiger Testen und dafür den Umfang der Tests klein halten   Integrationsumgebung Alle Änderungen sollten auf einem der Produktion ähnlichen System getestet werden   Einfacher Zugriff Alle Projektbeteiligten, also auch Nicht-Entwickler, benötigen Zugriff auf die Ergebnisse der Software-Entwicklung   Automatisiertes Reporting Informationen zu Auslieferungen der Software müssen einfach und verständlich einsehbar sein   Automatisiertes Deployment Die Auslieferung der Software auf unterschiedliche Plattformen sollte so einfach wie möglich sein     Vorteile  Probleme bei der Auslieferung können früh erkannt und behoben werden Test des Gesamtsystems als Verbund Logik-Fehler können durch Unit-Testing rasch gefunden und behoben werden Hohe Verfügbarkeit von Test- und Integrationsplattformen (auch für den Kunden) Schnelle Reaktion des Systems beschleunigt die Entwicklung   Jenkins Die Software, welche von der SBB für CI/CD eingesetzt wird ist Jenkins. Die Anwendung ist unter https://ci.sbb.ch/ erreichbar.\n Deployment-Pipeline Zum Gesamtsystem von CI/CD (bei der SBB) und damit der Deployment-Pipeline gehören die folgenden Systeme/Anwendungen:\n   System Zweck     GIT-Repository Source-Code Ablage   Artifactory Digitales Archiv   Jenkins CI/CD-Plattform   Docker Containervirtualisierung   Openshift Container Plattform Container Anwendungsplattform    Bei Änderungen am GIT-Repository wird durch den Jenkins ein Maven-Build ausgelöst. Dieser legt je nach Build-Konfiguration ein neues Artefakt im Artifactory ab (CI). Aus dem Artifactory kann dieses Artefakt über den Jenkins via Docker auf die Openshift Container Plattform ausgeliefert werden (CD).\nFür die Konfiguration einer Deployment-Pipeline sind die folgenden Dateien notwendig:\n Jenkinsfile Pipeline-Konfiguration als JSON  Jenkinsfile Diese Datei wird durch den Jenkins in jedem GIT-Repository gesucht. Wenn Sie gefunden wird, dann wird der Jenkins anhand der Konfiguration im GIT-Repository handeln. Der minimale Inhalt ist wie folgt:\n1 2 3 4  #!groovy @Library(['pipeline-helper@release', 'esta-cloud-pipeline@release']) _ estaCloudPipeline([:])   Die erste Zeile markiert diese Datei als Groovy-Script. Die zweite Zeile lädt die zu verwendende Bibliothek, welche in diesem Fall der Release des Pipeline-Helpers ist. Die letzte Zeile gibt den Namen der zu verwendenden Konfiguration an. Die Datei für die Konfiguration muss also den Namen estaCloudPipeline.json haben.\nPipeline-Konfiguration als JSON Die Pipeline-Konfiguration dient dem Jenkins zur Konfiguration der gesamten Pipeline inklusive deren auswählbaren Möglichkeiten für manuelle Optionen. Wir betrachten eine etwas umfangreichere Konfiguration am folgenden Beispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  { \"mainBranch\": \"master\", \"hotfixBranch\": \"hotfix\", \"docker\": { \"artifactoryDockerRepo\": \"cca\", \"openshiftAppName\": \"interviewtool-core\" }, \"mvn\": { \"parentPom\": \"pom.xml\", \"deployableArtifactsPom\": \"pom.xml\", \"artifactoryMavenRepo\": \"cca.mvn\" }, \"stages\": [ { \"stageName\": \"dev\", \"isOpenshiftDeploymentEnabled\": true, \"openshiftProject\": \"interviewtool-dev\", \"openshiftCluster\": \"aws\", \"openshiftJenkinsCredentialsId\": \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\", \"preCiDeploymentJob\": \"\", \"postCiDeploymentJob\": \"\" }, { \"stageName\": \"int\", \"isOpenshiftDeploymentEnabled\": true, \"openshiftProject\": \"interviewtool-int\", \"openshiftCluster\": \"aws\", \"openshiftJenkinsCredentialsId\": \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\", \"preCiDeploymentJob\": \"\", \"postCiDeploymentJob\": \"\" }, { \"stageName\": \"prod\", \"isOpenshiftDeploymentEnabled\": true, \"openshiftProject\": \"interviewtool-prod\", \"openshiftCluster\": \"aws\", \"openshiftJenkinsCredentialsId\": \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\", \"preCiDeploymentJob\": \"\", \"postCiDeploymentJob\": \"\" } ], \"steps\": [ { \"stepType\": \"continuous\", \"isBuildEnabled\": true, \"branchNamePrefixes\": [ \"feature\", \"develop\", \"bugfix\" ], \"additionalBuildParams\": \"-DskipITs\" }, { \"stepType\": \"integrationBuild\", \"isBuildEnabled\": true, \"xrayScanEnabled\": true, \"failOnXrayScan\": false, \"sonarScanEnabled\": true, \"staging\": { \"stages\": [ \"dev\" ] }, \"triggerBuildOnCommitEnabled\": false }, { \"stepType\": \"release\", \"isBuildEnabled\": true, \"xrayScanEnabled\": true, \"failOnXrayScan\": true, \"sonarScanEnabled\": true, \"staging\": { \"stages\": [ \"dev\" ] }, \"additionalBuildParams\": \"-DskipITs\", \"triggerBuildOnCommitEnabled\": false, \"hotfixCreationEnabled\": false }, { \"stepType\": \"hotfix\", \"isBuildEnabled\": true } ] }   Die folgenden Einstellungen können in der Konfiguration gefunden werden:\n   Gruppe Einstellung Beschreibung     Root mainBranch Name des Produktions-Branches. Normalerweise master oder develop   Root hotfixBranch Prefix für Hotfix-Branches   Docker artifactoryDockerRepo Repository-Pfad für Docker   Docker openshiftAppName Name der Applikation auf der Openshift Container Plattform   Maven parentPom Pfad zum pom.xml   Maven deployableArtifactsPom Angabe aller auslieferbaren pom.xml   Maven artifactoryMavenRepo Name des Artifactory-Verzeichnisses   Stage (Angabe erfolgt pro Stage) stageName Name der Plattform als Abkürzung (dev, test, inte, prod)   Stage (Angabe erfolgt pro Stage) isOpenshiftDeploymentEnabled Deployment auf Openshift erlaubt (true / false)   Stage (Angabe erfolgt pro Stage) openshiftProject Name des Projekts auf der Openshift Container Plattform   Stage (Angabe erfolgt pro Stage) openshiftCluster Openshift Cluster (OTC, AWS, …)   Stage (Angabe erfolgt pro Stage) openshiftJenkinsCredentialsId Secret Key, damit sich Jenkins auf der Openshift Container Plattform einloggen kann   Stage (Angabe erfolgt pro Stage) preCiDeploymentJob Name des vorgelagerten Jenkins-Jobs   Stage (Angabe erfolgt pro Stage) postCiDeploymentJob Name des nachgelagerten Jenkins-Jobs   Step (Angabe erfolgt pro Step) stepType Name der Option   Step (Angabe erfolgt pro Step) isBuildEnabled Option aktiv (true / false)   Step (Angabe erfolgt pro Step) branchNamePrefixes Angabe der Präfixe der zu verwendenden Branches   Step (Angabe erfolgt pro Step) additionalBuildParams Weitere Maven-Angaben   Step (Angabe erfolgt pro Step) xrayScanEnabled XRay aktiv (true / false)   Step (Angabe erfolgt pro Step) failOnXrayScan Build schlägt fehl wenn XRay fehlschlägt (true / false)   Step (Angabe erfolgt pro Step) sonarScanEnabled Sonar aktiv (true / false)   Step (Angabe erfolgt pro Step) staging Angabe von Stages zur Auslieferung   Step (Angabe erfolgt pro Step) triggerBuildOnCommitEnabled Wird dieser Build ausgeführt, wenn ein Commit erfolgt (true / false)   Step (Angabe erfolgt pro Step) hotfixCreationEnabled Darf dieser Build einen Hotfix-Branch erzeugen (true / false)    Die genauen Beschreibungen der einzelnen Einstellungen sind sehr umfangreich. Weitere Informationen gibt es hier: https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline+-+Parameter+Documentation\nZu Beginn gibt es Konfigurationen für GIT und Docker. Anschliessend benötigt Maven den Namen und den Pfad für das POM. Die Auslieferung erfolgt auf sogenannte Stages, dies sind Projekte auf der Openshift Container Plattform. Jede Stage kann individuell konfiguriert werden. Wichtig dabei ist der Schlüssel, welcher auf dem Jenkins hinterlegt sein muss. Nur mit diesem Schlüssel kann sich der Jenkins für ein Deployment auf der Openshift Container Plattform einloggen. Für jeden Step kann konfiguriert werden, ob er auf eine oder mehrere Stages ausgeliefert werden soll. Die häufigsten Steps sind:\n Continuous Release Deploy  Der Continuous-Build dient dabei Branches vom Typ feature oder bugfix (je nach Konfiguration) zu bauen. Nur erfolgreiche Builds dieser Weiterentwicklungen oder Bugfixes können anschliessend in den Haupt-Entwicklungsbranch zurück gemerged werden. Dieser Build wird nicht auf eine Stage ausgeliefert. Der Release-Build dient der Herstellung einer neuen Version einer Anwendung. Dieser Build taggt die Version auf dem GIT-Repository und liefert sie auf die entsprechend konfigurierten Stages aus. Vorbehalten bleibt normalerweise der Release auf eine produktive Umgebung. Der Deploy-Build dient dem Deployment einer bestimmten Version auf eine bestimmte Stage. Die Stage kann dabei gewählt werden. Dieser Step-Typ wird normalerweise für den Release auf Integration- oder Produktionsplattformen verwendet.\nZum Nachlesen gibt es hier noch die Dokumentation der Pipeline: https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline\n","categories":"","description":"Maven Continuous Integration\n","excerpt":"Maven Continuous Integration\n","ref":"/training-sbb-puzzle/docs/java/maven/","tags":"","title":"Maven und Continuous Integration"},{"body":"Hallo Ninja! 🥷\nEs freut uns das du git kennen lernen willst!\nWir haben hier ein Lab für dich zusammengestellt damit du in dieses Thema eintauchen kannst. Finde für dich heraus warum git eine Zeitmaschine ist und was es mit den Paralleluniversen auf sich hat.\nSchwerpunkte Dieses Lab unterteilt sich in folgende Themenbereiche:\n Was ist dieses Git? Git Basics Git Branches GitHub  Let’s play! Meisterst du diese Challenges?\n oh my git! learn git branching git immersion  Voraussetzungen  git installiert  Auch interessant, wird aber nicht behandelt:  Git Tags Git Aliases  ","categories":"","description":"Verteilte Versionsverwaltung mit Git","excerpt":"Verteilte Versionsverwaltung mit Git","ref":"/training-sbb-puzzle/docs/git/","tags":"","title":"Git"},{"body":"Ziele  Ich kenne die Schlüsselwörter try, catch, finally, throw und throws Ich weiss was “Unchecked” und “Checked” Exceptions sind Ich kann auftretende Exceptions abhandeln Ich kann eigene Exceptions definieren und anwenden Ich kenne Multicatch und Try-With-Resources und kann die beiden Konstrukte anwenden Ich kenne die beiden Interfaces AutoCloseable und Closeable  Änderungskontrolle    Autor Version Datum Änderungen     Claudio Zesiger 0.1 01.09.2020 * Initiale Version erstellt   Claudio Zesiger 0.2 21.10.2020 * Initiale Version abgeschlossen    Voraussetzungen  Gute Grundlagenkenntnisse von Java-Anwendungen   Theorie / Einleitung  In jeder Applikation kann es zu erwarteten oder unerwarteten Fehlern kommen. In Java werden diese Fehler durch den Bereich Exception Handling abgedeckt. Im Exception Handling gilt es, durch gezieltes Abhandeln von auftretenden Exceptions, Abstürze der Anwendung zu verhindern. Jeder Software-Entwickler muss sich bewusst sein, dass nicht behandelte Exceptions eine Anwendung jederzeit beenden können. Ebenfalls schlimme Auswirkungen in Form von “Memory Leaks” haben nicht geschlossene Streams.\nInnerhalb des Java Exception Handling unterscheiden wir zwei Arten von Exceptions:\n Unchecked Exceptions Checked Exceptions  Unchecked Exceptions sind Laufzeitfehler und werden durch den Compiler nicht erkannt. Bei der Implementation werden diese Fehler häufig übersehen. Der häufigste Laufzeitfehler ist die NullPointerException. Diese kann erst zur Laufzeit auftreten, da nur zur Laufzeit Objekte erzeugt werden und damit eine Referenz überhaupt null sein kann. Die einzige Möglichkeit Laufzeitfehler abzuhandeln ist “Safe Programming”. Während der Implementation prüfen wir also beispielsweise, ob eine Referenz nicht null ist bevor wir darauf zugreifen.\nChecked Exceptions hingegen werden durch den Compiler erkannt und müssen zum Zeitpunkt der Kompilierung entweder am Ort des Auftretens abgehandelt werden oder sie werden an das Objekt weitergereicht, welches die entsprechende Methode aufgerufen hat. Damit wird auch die Verantwortung die Exception abzuhandeln an den Aufrufer weitergegeben.\nDazu ein kleines Beispiel:\n1 2 3 4 5  public static void main(String\\[\\] args) { PhoneBook phoneBook = new PhoneBook(); Person person = phoneBook.findByPhoneNumber(\"079 654 32 10\"); System.out.println(person.getName()); }   Ohne die Implementation der Methode findByPhoneNumber zu kennen, muss ein Software-Entwickler an dieser Stelle das zurückgelieferte Objekt vom Typ Person zuerst auf null prüfen. Schauen wir uns also die Implementation dieser Methode etwas genauer an:\n1 2 3 4 5 6 7 8 9 10 11 12  public class PhoneBook { private List\u003cPerson\u003e entries = new ArrayList\u003c\u003e(); public Person findByPhoneNumber(String number) { for (Person p: this.entries) { if (p.getPhoneNumber().equals(number)) { return p; } } return null; } }   Wie (vielleicht) erwartet liefert die Methode null zurück, falls kein Eintrag mit der gesuchten Nummer gefunden wird. Dies führt in der Main-Methode im Codeblock oben auf der letzten Zeile zu einer NullPointerException, da die Referenz der Person auf null zeigt. Abhilfe schafft hier ein einfaches If-Statement.\n1 2 3 4 5 6 7  public static void main(String\\[\\] args) { AddressBook addressBook = new AddressBook(); Person person = addressBook.findByPhoneNumber(\"079 654 32 10\"); if (person != null) { System.out.println(person.getName()); } }   Der Laufzeitfehler kann nun nicht mehr auftreten. Es stellt sich nun die Frage, ob wir mit dieser Lösung zufrieden sein können. Im Prinzip müssten wir zumindest noch ein Else-Statement ergänzen, damit wir informiert werden wenn keine Person mit dieser Nummer gefunden wird.\n1 2 3 4 5 6 7 8 9  public static void main(String\\[\\] args) { AddressBook addressBook = new AddressBook(); Person person = addressBook.findByPhoneNumber(\"079 654 32 10\"); if (person != null) { System.out.println(person.getName()); } else { System.out.println(\"Es wurde keine Person mit dieser Nummer gefunden!\"); } }   Eine andere Lösung könnte sein das Null-Object Pattern zu verwenden und damit ein gültiges Objekt anstelle von null zurückzuliefern.\n try / catch / finally Um eine Checked Exception abzuhandeln, muss der Block (welcher die Exception erzeugt) innerhalb eines try-Blocks angelegt werden. Der abzuhandelnde Exception-Typ wird dabei in den catch-Block geschrieben.\n1 2 3 4 5  try { // Code, welcher eine IOException werfen könnte } catch (IOException e) { // Code für die Abhandlung der IOException }   Ein solches Statement kann beliebig viele catch-Blöcke aufweisen\n1 2 3 4 5 6 7 8  try { int[] array = new int[2]; array[3] = 30 / 0; } catch (ArithmeticException e) { // Code für die Abhandlung der ArithmeticException } catch (ArrayIndexOutOfBoundsException e) { // Code für die Abhandlung der ArrayIndexOutOfBoundsException }   Bei mehreren catch-Blöcken muss die spezifischste Exception stets zuoberst stehen. Je weiter unten der catch-Block steht, desto genereller wird die Exception, die abgefangen werden soll. Der Grund dafür ist, dass alle Checked Exceptions von der Klasse Exception abgeleitet sind.\nSteht eine allgemeinere Exception weiter oben, so wird der catch-Block der spezifischeren Exception weiter unten nicht mehr erreichbar.\nAn jeden try-Block (ob mit oder ohne catch-Block) kann zusätzlich ein finally-Block angehängt werden. Dieser Block wird nach der Abhandlung der Exception ausgeführt.\n1 2 3 4 5 6 7  try { // Code, welcher eine IOException werfen könnte } catch (IOException e) { // Code für die Abhandlung der IOException } finally { // Code, welcher nach der Abhandlung der Exception ausgeführt werden soll }   Wie oben erwähnt, kann der catch-Block weggelassen werden:\n1 2 3 4 5  try { // Code, welcher eine beliebige Exception werfen könnte } finally { // Code, welcher nach der Abhandlung der Exception ausgeführt werden soll }   Vorsicht ist geboten bei return-Anweisungen innerhalb von catch- oder finally-Blöcken. Da der finally-Block immer zuletzt ausgeführt wird, ist das Statement in diesem Block auch massgebend für die Funktionalität.\n throw / throws Wie bereits weiter oben erwähnt, muss eine Exception nicht immer dort abgehandelt werden wo sie gerade auftreten kann. Wenn sich der Entwickler also entscheidet die Abhandlung in andere Klassen zu verlagern, so kann er mit dem Schlüsselwort throws angeben, dass die aufrufende Komponente die Exception abhandeln muss.\nDazu ein kurzes Beispiel:\n1 2 3  public class EntryForbiddenException extends Exception { }   1 2 3 4 5 6 7 8  public class Saloon { public void checkAge(int age) throws EntryForbiddenException { if (age \u003c 18) { throw new EntryForbiddenException(); } // ... } }   1 2 3 4 5 6 7 8 9 10  public class Main { public static void main(String\\[\\] args) { Saloon saloon = new Saloon(); try { saloon.checkAge(15); } catch (EntryForbiddenException e) { // ... } } }   Wie wir sehen, wird die Abhandlung in die Main-Methode verlagert. Die Weitergabe von Exceptions kann über beliebig viele Stufen erfolgen. Wird die Exception jedoch von der “obersten” Stufe (in diesem Fall die Main-Methode) nicht abgehandelt, so wird die Anwendung mit der entsprechenden Exception beendet. Dies passiert, weil niemand die Exception abgehandelt hat.\n Umwandlung Laufzeitfehler in Checked Exception Mit der Lösung aus dem Beispiel weiter oben können wir nicht wirklich zufrieden sein. Anstatt den Rückgabewert der Methode findByPhoneNumber auf null zu prüfen, wählen wir nun einen anderen Ansatz: Wir erweitern die Anwendung, so dass die Methode als Rückgabewert keine null-Werte mehr liefert. Da wir aber durch den Compiler gezwungen werden einen Rückgabewert zu definieren, bleibt uns nur noch die Möglichkeit übrig eine Exception zu werfen. Zu diesem Zweck definieren wir zuerst einmal eine entsprechende Exception:\n1 2 3  public class PersonNotFoundException extends Exception { }   Diese Exception wird nun an der entsprechenden Stelle im Sourcecode geworfen. Die Methode erhält zudem noch eine Erweiterung mit dem Schlüsselwort throws.\n1 2 3 4 5 6 7 8 9 10 11 12  public class PhoneBook { private List\u003cPerson\u003e entries = new ArrayList\u003c\u003e(); public Person findByPhoneNumber(String number) throws PersonNotFoundException { for (Person p: this.entries) { if (p.getPhoneNumber().equals(number)) { return p; } } throw new PersonNotFoundException(); } }   Beim Aufruf der Methode sind wir nun gezwungen, die Exception abzuhandeln.\n1 2 3 4 5 6 7 8 9  public static void main(String[] args) { AddressBook addressBook = new AddressBook(); try { Person person = addressBook.findByPhoneNumber(\"079 654 32 10\");\tSystem.out.println(person.getName()); } catch (PersonNotFoundException e) { System.out.println(\"Es wurde keine Person mit dieser Nummer gefunden!\"); } }   Aus dem ursprünglichen Laufzeitfehler ist nun eine abgehandelte Exception geworden. Die Implementation vermeidet wo immer möglich die Rückgabe von null-Werten.\n Multi-Catch Seit Java 7 gibt es die Möglichkeit für einen sogenannten Multi-Catch.\nSchauen wir uns das folgende Beispiel an:\nOhne Multi-Catch 1 2 3 4 5 6 7 8 9 10 11 12 13  public static void main(String[] args) { Scanner scn = new Scanner(System.in); try { int n = Integer.parseInt(scn.nextLine()); if (99%n == 0) { System.out.println(n + \" is a factor of 99\"); } } catch (ArithmeticException ex) { System.out.println(\"Arithmetic Exception \" + ex); } catch (NumberFormatException ex) { System.out.println(\"Number Format Exception \" + ex); } }   Mit Multi-Catch 1 2 3 4 5 6 7 8 9 10 11  public static void main(String[] args) { Scanner scn = new Scanner(System.in); try { int n = Integer.parseInt(scn.nextLine()); if (99%n == 0) { System.out.println(n + \" is a factor of 99\"); } } catch (ArithmeticException | NumberFormatException ex) { System.out.println(\"Exception \" + ex); } }   Die beiden Exceptions werden in einem catch-Block zusammengefasst. Die Exceptions innerhalb eines Multi-Catch dürfen nicht in einer Vererbungsbeziehung zueinander stehen. Der Basistyp muss also unterschiedlich sein.\n Try-With-Resources Ebenfalls seit Java 7 gibt es die Möglichkeiten für automatisches Ressourcen-Management. Betrachten wir dazu zuerst ein Beispiel ohne automatisches Ressourcen-Management:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public static String readFirstLine(String path) { BufferedReader br = null; try { br = new BufferedReader(new FileReader(path)); return br.readLine(); } catch (IOException e) { // handle or rethrow } finally { try { if (br != null) { br.close(); } } catch (IOException e) { // ignore } } return \"\"; }   Der finally-Block ist notwendig, um die verwendete Ressource des Buffered-Readers zu schliessen. Da beim Schliessen aber eine IOException auftreten kann benötigen wir innerhalb des finally-Blocks einen zusätzlichen try-catch-Block.\nBetrachten wir nun das gleiche Beispiel mit automatischem Ressourcen-Management:\n1 2 3 4 5 6 7 8  public static String readFirstLine(String path) { try (FileReader fr = new FileReader(path); BufferedReader br = new BufferedReader(fr)) { return br.readLine(); } catch (IOException e) { // handle or rethrow } return \"\"; }   Wie wir sehen fällt der finally-Block zum Schliessen der Ressourcen komplett weg. Die beiden Ressourcen FileReader und BufferedReader werden automatisch geschlossen. Dies geschieht im Hintergrund über die Methode close, welche vom Interface AutoCloseable zur Verfügung gestellt wird. In einem try-with-resources Statement dürfen also nur Objekte vorliegen, welches das genannte Interface implementieren. Das Closeable-Interface mit der gleichen Funktion stellt dabei die Abwärtskompatibilität zu älteren Java-Versionen sicher. Grundsätzlich soll das Closeable-Interface für IO Streams verwendet werden, da es mit IOExceptions arbeitet.\nDas Schliessen der Ressourcen hat stets die Reihenfolge von hinten nach vorne. In unserem Beispiel wird also zuerst der BufferedReader geschlossen und danach der FileReader. Die Verkettung von Ressourcen innerhalb eines try-with-resources Statements ist zu vermeiden. Besser sind separate Deklarationen wie oben gezeigt.\n","categories":"","description":"Exception Handling\n","excerpt":"Exception Handling\n","ref":"/training-sbb-puzzle/docs/java/exception_handling/","tags":"","title":"Exception Handling"},{"body":"Inhalt  Beispiel für Branching, Merging und Rebasing Einfache Mergekonflikte  Im vorherigen Kapitel haben wir gelernt, dass man nur dann seine Änderungen pushen kann, wenn einem niemand anders zuvorkam. Um diesem Problem aus dem Weg zu gehen, kann ein Branch (engl. für Ast/Zweig) verwendet werden, welcher zu einem späteren Zeitpunkt wieder auf den Hauptpfad gemerged wird.\nIm ersten Kapitel haben wir gelernt, dass Git mit jedem Commit ein Snapshot der Daten und eine Referenz auf den vorgehenden Commit speichert. Ein Branch ist nichts anderes als ein Zeiger auf einen spezifischen Snapshot.\nErzeugen wir mit git branch testing einen neuen Branch namens “testing” so wird ein Zeiger erstellt, welcher auf den selben Commit zeigt auf dem man sich im Moment befindet. Damit Git weiss, wo man sich im Moment gerade befindet gibt es einen speziellen Zeiger namens HEAD:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----------+ | HEAD | +----+-----+ | v +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----+-----+ | Commit 1 +\u003c-------+ Commit 2 +\u003c-------+ Commit 3 | +----------+ +----------+ +----+-----+ ^ | +----+-----+ | testing | +----------+   Wie man auf der Skizze erkennen kann, wurde der neue Branch “testing” erstellt, wir befinden uns aber immer noch auf dem “master” Branch (HEAD). Um nun auf den neuen Branch zu wechseln können wir den Befehl git checkout testing verwenden. Protipp: Um einen neuen Branch zu erstellen und gleich auf diesen zu wechseln, kann der Befehl git checkout -b \u003cbranchname\u003e verwendet werden.\nErstellen wir nun einen Commit auf dem “testing” Branch, dann zeigt sich folgendes Bild:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----------+ +----------+ | Commit 1 +\u003c-------+ Commit 2 +\u003c-------+ Commit 3 |\u003c-------+ Commit 4 | +----------+ +----------+ +----------+ +----------+ ^ | +----------+ | testing | +----+-----+ ^ | +----------+ | HEAD | +----+-----+   Beispiel für Branching, Merging und Rebasing In diesem Abschnitt wird davon ausgegangen, dass es einen Fehler im aktuellen master-Branch gibt, der unter testing nicht behoben wurde, da er zur Entwicklung neuer Funktionen verwendet wird. Um den Fehler zu beheben, wird ein neuer Branch mit dem Namen bugfix erstellt, der mit der gleichen Revision wie master beginnt.\n1 2 3 4  $ git checkout master Switched to branch 'master' $ git checkout -b bugfix Switched to a new branch 'bugfix'   git commit Nachdem der Branch bugfix erstellt und ausgecheckt wurde, wird die Korrektur entwickelt und übertragen.\n1 2 3 4 5 6 7 8 9 10 11  $ git diff diff --git a/first-file.txt b/first-file.txt index 4c5fd91..aa24abd 100644 --- a/first-file.txt +++ b/first-file.txt @@ -1 +1 @@ -First file +First file with bugfix $ git commit -a -m \"Bugfix for first file\" [bugfix a27a927] Bugfix for first file 1 file changed, 1 insertion(+), 1 deletion(-)    Die erste Zeile in first-file.txt wurde geändert, indem with bugfix zur ersten Zeile hinzugefügt wurde.  Mit der neuen Übergabe an bugfix fangen die Branches an, auseinanderzulaufen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  +----------+ | testing | +----------+ +----+-----+ | master | | +----+-----+ v | +----+-----+ v + Commit 4 | +----------+ +----------+ +----+-----+\u003c-------+----------+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 + +----------+ +----------+ +----------+\u003c-------+----------+ + commit 5 | +----+-----+ ^ | +----+-----+ | bugfix | +----+-----+ ^ | +----+-----+ | HEAD | +----+-----+   Mergen der Branches Nach der Fehlerbehebung ist es nun an der Zeit, sie wieder in den Master-Branch einzubinden, damit andere Benutzer sie ebenfalls verwenden können.\ngit merge Merge ist eine Wiederholung der Änderungen eines benannten Commits (auch Branch genannt) in einen anderen Branch, da diese voneinander abwichen. Damit dies funktioniert, ändert man zuerst den Zielbranch. In diesem Fall ist das bugfix. Die Änderungen sollen nach master zurückgespielt werden. Da das Ziel master ist, ist der erste Schritt, zu diesem Branch zu wechseln.\n1 2 3 4 5 6 7 8 9 10 11  $ git checkout master Switched to branch 'master' $ git branch * master testing bugfix $ git merge bugfix Updating e303af7..a27a927 Fast-forward first-file.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)     Wechseln Sie zum Zielbranch (master).\n  Bestätigen Sie, dass Sie sich im Zielbranch befinden. Dieser Schritt ist optional.\n  Wiederholen Sie die Änderungen von bugfix in master.\n  Nach der Zusammenführung zeigen bugfix und master auf dieselbe Revision.!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | HEAD | +----+-----+ +----------+ | | testing | v +----+-----+ +----------+ | | master | v +----+-----+ +----+-----+ | + Commit 4 | v +----------+ +----------+ +----+-----+\u003c-------+----------+ +----+-----+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 +\u003c--------------------------+ commit 5 | +----------+ +----------+ +----------+ +----+-----+ ^ | +----+-----+ | bugfix | +----+-----+   git branch -d Es gibt keinen Grund mehr, den bugfix-Branch beizubehalten, da die Änderungen nun in master eingearbeitet wurden. Mit dem Befehl branch -d \u003cbranchname\u003e wird der Branch gelöscht.\n1 2 3 4 5 6 7 8  $ git branch bugfix * master testing $ git branch -d bugfix Deleted branch bugfix (was a27a927). $ git log --oneline -n 1 a27a927 (HEAD -\u003e master) Bugfix for first file     Der Branch kann beim Auschecken nicht gelöscht werden. Der aktive Branch ist master, der für die Löschung von bugfix funktioniert.\n  Der Branch wird gelöscht und die Ausgabe enthält den kurzen SHA1-Hash.\n  Die Überprüfung mit git log bestätigt, dass master auf denselben Hash zeigt wie bugfix.\n  Nachdem der Branch bugfix gelöscht wurde, bleiben nur noch master und testing übrig.\nRebasing Branches Nachdem die Fehlerkorrektur in den Branch master eingebracht wurde, ist der nächste logische Schritt, die Änderungen in den Branch testing einzubringen, um sicherzustellen, dass der nächste Release die korrigierte Version enthält. Wenn man mit mehreren Branches arbeitet, ist diese Operation notwendig, um nicht zu weit in den master zurückzufallen und viele Merge-Konflikte zu vermeiden.\ngit rebase Rebase bedeutet, dass der übergeordnete Commit der ersten Änderung im Branch verschoben und an den aktuellen Zeiger des Branches oder Commits angehängt wird, der in der Befehlszeile als Argument angegeben wird. Im folgenden Beispiel wechseln wir als erstes in den Branch, der rebase werden soll, und geben dann den Befehl rebase gegen master aus.\n1 2 3 4 5 6 7  $ git branch * master testing $ git checkout testing Switched to branch 'testing' $ git rebase master Successfully rebased and updated refs/heads/testing.     Derzeit auf dem Branch master, muss vor dem rebase auf testing wechseln.\n  Wechseln Sie zum Branch testing, der mit master rebased wird.\n  Erteilen Sie den Befehl rebase mit dem Argument master, dem Branch oder Zeiger, der für den rebase verwendet wird.\n  Die Meldung ist knapp und bezieht sich auf die git-interne Dateistruktur unter dem Verzeichnis .git.\n   Hinweis\nDie Durchführung eines rebase zwischen zwei Branches erfordert einen gemeinsamen Vorfahren im Tree.\n Nach dem Rebase sind “Master” und “Testing” wieder synchronisiert.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----------+ +----------+ +----------+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 +\u003c-------+ Commit 5 |\u003c-------+ Commit 4 | +----------+ +----------+ +----------+ +----------+ +----------+ ^ | +----------+ | testing | +----+-----+ ^ | +----------+ | HEAD | +----+-----+   Einfache Mergekonflikte Im oben erwähnten Beispiel ist alles automatisch gegangen beim Mergen, es gibt jedoch Fälle, bei denen Git nicht mehr in der Lage ist automatisch die Dateien Zusammenzuführen, wenn zum Beispiel eine Änderung an der gleichen Stelle einer Datei in beiden Branches vorgenommen wird. Gehen wir vom Beispiel oben aus, die Story die man da umsetzt macht auch etwas mit dem Dashboard welches wir kurzum anpassen mussten:\n1 2 3 4  $ git merge bugfix Auto-merging first-file.txt CONFLICT (content): Merge conflict in first-file.txt Automatic merge failed; fix conflicts and then commit the result.   Git konnte nicht automatisch mergen und hat somit keinen commit erstellt, wir müssen den Mergekonflikt von Hand lösen, bevor wir weiter arbeiten können. Weitere Infos liefert git status:\n1 2 3 4 5 6 7 8 9 10 11  $ git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add \u003cfile\u003e...\" to mark resolution) both modified: first-file.txt no changes added to commit (use \"git add\" and/or \"git commit -a\")   Git fügt automatisch eine Markierung in die Dateien ein, welche gmerged werden müssen:\n1 2 3 4 5  \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD first line from master ======= first line from testing \u003e\u003e\u003e\u003e\u003e\u003e\u003e testing   Das bedeutet, dass der HEAD (also der Masterbranch, weil auf den haben wir vor dem Mergen gewechselt) den oberen Teil (also immer alles auf Grün) und unsere neuen Änderungen den unteren Teil auf dieser Zeile hatten. Man kann den Konflikt nun lösen, indem man den ganzen Block, mit der gewünschten Änderung ersetzt. Ist der Konflikt gelöst, können wir die Datei ganz normal stagen und commiten. Gerade bei grösseren Mergekonflikten kann es praktisch sein mit tools zu Arbeiten, welche einem die Unterschiede zwischen den beiden Branches Grafisch darstellen, dafür gibt es den Befehl git mergetool.\nIn der Regel können viele Merge-Konflikte verhindert oder minimiert werden, indem:\n  Regelmässige Kommunikation von Änderungen zwischen Teammitgliedern.\n  Regelmässige Rebases mit dem Merge-Zielbranch.\n  Erstellen kleiner und atomarer Commits.\n  Hands On https://learngitbranching.js.org/\n","categories":"","description":"","excerpt":"Inhalt  Beispiel für Branching, Merging und Rebasing Einfache …","ref":"/training-sbb-puzzle/docs/git/git-branches/","tags":"","title":"Git Branches"},{"body":"Ziele  Ich kann mit Reflection Informationen zur Laufzeit zu Klassen, Objekten, Methoden und Attributen ermitteln Ich kenne die Vor- und Nachteile von Reflection Ich kenne die Metadaten Class\u003cT\u003e, Field und Method Ich kann mit Reflection eine Methode auf einem Objekt aufrufen Ich kann mit Reflection zur Laufzeit eine Klasse untersuchen Ich kann mit Reflection ein neues Objekt zur Laufzeit erzeugen Ich kenne die Grundlagen von Annotationen Ich kenne die wichtigsten Standard-Annotationen des JDKs Ich kann eigene Annotationen definieren und diese zur Laufzeit auswerten  Änderungskontrolle    Autor Version Datum Änderungen     Claudio Zesiger 0.1 21.10.2020 * Initiale Version erstellt   Claudio Zesiger 0.2 22.10.2020 * Initiale Version abgeschlossen    Voraussetzungen  Fundierte Grundlagenkenntnisse von Java-Anwendungen  Reflection API  Allgemeine Informationen Reflection erlaubt einer Anwendung, diverse Informationen über sich selbst herauszufinden, zudem kann man mit Reflection zur Laufzeit Instanzen von Klassen erzeugen. Ein normaler Applikationsentwickler wird diese Technik eher selten verwenden, es gibt aber Anwendungsfälle, die nur mit Reflection umzusetzen sind.\nReflection hat die folgenden Einsatzgebiete:\n Erweiterbarkeit: Eine Applikation kann mit Reflection Klassen instanziieren, die zum Zeitpunkt der Kompilierung noch gar nicht bekannt waren. Zur Laufzeit benötigen wir dazu nur den voll qualifizierten Namen einer solchen Klasse, die restlichen Bestandteile der Klasse können zur Laufzeit abgefragt werden Class-Browser, Debugger, Tools zum Testen: Mit Reflection erhält eine Anwendung Zugriff auf alle Bestandteile einer Klasse. Reflection kann auch auf private Attribute und Methoden zugreifen und hebelt damit das Prinzip der Kapselung aus. Frameworks wie Spring oder jUnit nutzen Reflection, um damit ihre Annotationen auswerten zu können.  Beim Einsatz von Reflection gilt die folgende Regel: Wenn es eine Lösung ohne Reflection gibt, dann wähle diese!\n Grundlagen Reflection nutzt die folgenden Konstrukte, um damit eine Anwendung zu untersuchen. Diese Konstrukte werden Metadaten bzw. Metainformationen genannt:\n java.lang.Class\u003cT\u003e, Metadaten für Klassen. Beinhaltet Klassenname, implementierte Interfaces, Methoden und Attribute java.lang.reflect.Field, Metadaten für Instanzvariablen. Enthält Typ, Name, Sichtbarkeit, usw. java.lang.reflect.Method, Metadaten für Methoden. Enthält Name, Parameter, Sichtbarkeit, usw.  Damit wir an die Informationen einer Klasse gelangen können, benötigen wir einen Startpunkt. Dieser Startpunkt ist bei Reflection immer eine Instanz der Klasse java.lang.Class\u003cT\u003e.\nDie anderen Metadaten lassen sich dann über diese Instanz beziehen. Es gibt drei Möglichkeiten, an diesen Startpunkt zu gelangen:\n   # Möglichkeit Code-Beispiel Beschreibung     1 voll-qualifizierter Klassenname Class\u003c?\u003e clazz = Class.forName(“package.ClassName”); Der Name der gewünschten Klasse wird einfach als String übergeben. Dies ist sehr gut einsetzbar, wenn der konkrete Typ zur Laufzeit noch unbekannt ist. Es ist also beispielsweise möglich Klassennamen aus einer Konfigurationsdatei einzulesen.   2 Methode getClass() Class\u003c?\u003e clazz = object.getClass(); Der Aufruf der Methode getClass() auf einer Referenz liefert direkt eine Instanz des Klassenobjekts.   3 statisches Attribut .class Class\u003c?\u003e clazz = ClassName.class; Durch Kenntnis des konkreten Typs erhält man den Zugriff auf das Klassenobjekt mit dem statischen Attribut class.    Bei Arrays muss eine eher kryptische Notation verwendet werden. Hier wird aus Komplexitätsgründen nicht weiter darauf eingegangen.\n Methoden aufrufen Der nächste Schritt ist nun, dass mit Reflection eine Methode aufgerufen werden kann. Die folgende Reihenfolge gibt einen guten Überblick welche Schritte dazu notwendig sind:\n Ermitteln der Metainformationen zur Klasse Ermitteln der Metainformationen zur Methode Aufrufen der Methode Exception Handling  Beispiel:\n1 2 3 4 5  public class Greeter { public String greet(String name) { return \"Hello \" + name; } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  public class Main { public static void main(String[] args) { String methodName = \"greet\"; Class\u003c?\u003e[] parameterTypes = new Class\u003c?\u003e[] { String.class }; // Ermitteln der Metainformationen zur Klasse Class\u003c?\u003e clazz = Greeter.class; try { // Ermitteln der Metainformationen zur Methode Method greetMethod = clazz.getMethod(methodName, parameterTypes); // Methode aufrufen String parameter = \"Claudio\"; Object result = greetMethod.invoke(new Greeter(), parameter); System.out.println(result); } catch (NoSuchMethodException e) { // handle exception } catch (SecurityException e) { // handle exception } catch (IllegalAccessException e) { // handle exception } catch (IllegalArgumentException e) { // handle exception } catch (InvocationTargetException e) { // handle exception } } }   Wie wir sehen gibt es zwei grosse Nachteile beim Einsatz von Reflection:\n Viel Code. Vor Java 7 benötigt man für einen Methodenaufruf zwischen 40 und 50 Zeilen Programmcode. Viel Exception Handling  Seit Java 7 wurden die Nachteile ein wenig entschärft, da sich das Exception Handling deutlich eleganter gestalten lässt. Einerseits bietet Java 7 die Möglichkeit zum Multi-Catch (siehe Modul Exception Handling) und andererseits wurden alle Exceptions beim Einsatz von Reflection in der Klasse java.lang.ReflectiveOperationException zusammengefasst.\nAbgekürzt lässt sich das oben gezeigte Beispiel so darstellen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  String methodName = \"greet\"; Class\u003c?\u003e[] parameterTypes = new Class\u003c?\u003e[] { String.class }; // Ermitteln der Metainformationen zur Klasse Class\u003c?\u003e clazz = Greeter.class; try { // Ermitteln der Metainformationen zur Methode Method greetMethod = clazz.getMethod(methodName, parameterTypes); // Methode aufrufen String parameter = \"Claudio\"; Object result = greetMethod.invoke(new Greeter(), parameter); System.out.println(result); } catch (ReflectiveOperationException e) { // handle exception }    Zugriff auf Methoden und Attribute Sobald wir ein Klassenobjekt ermittelt haben können wir auf weitere Metadaten zugreifen. Spannend ist, dass wir so nicht nur auf Methoden und Attribute, sondern auch auf Annotationen zugreifen können.\nIm Beispiel oben wurde auf eine Methode zugegriffen. Dieser Zugriff besitzt die Einschränkung, dass nur öffentlich zugängliche Methoden ermittelt werden können. Damit wir auch Zugriff auf nicht öffentlich sichtbare Bestandteile erhalten, ist etwas mehr Aufwand notwendig. Um alle definierten Methoden einer Klasse unabhängig von der Sichtbarkeit aufzulisten können wir die Methode getDeclaredMethod(Class\u003c?\u003e) verwenden. Um wirklich alle Methoden einer Klasse über den Namen zu finden, also inklusive den Methoden aus Superklassen, können wir uns ganz einfach einer Rekursion bedienen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public static Method findMethods(Class\u003c?\u003e clazz, String methodName, Class\u003c?\u003e... parameterTypes) { Objects.requireNonNull(methodName, \"Methodenname darf nicht null sein\"); Objects.requireNonNull(parameterTypes, \"Parameter dürfen nicht null sein\"); if (clazz == null) { return null; } try { return clazz.getDeclaredMethod(methodName, parameterTypes); } catch (NoSuchMethodException e) { return findMethod(clazz.getSuperclass(), methodName, parameterTypes); } }   Die Methode getField(String) liefert für den Namen eines Attributs das entsprechende Field-Objekt zurück. Mit der Methode getDeclaredField(String) erhält man auch nicht öffentliche Attribute einer Klasse.\n Eigenschaften ermitteln Für Objekte des Typs Method und Field lassen sich mit der Methode getModifiers() verschiedene Eigenschaften in Form einer Zahl abfragen. Die Auswertung kann dann mit der Hilfsklasse java.lang.reflect.Modifier erfolgen.\nMögliche Abfragen sind beispielsweise:\n isPublic(int), isProtected(int) und isPrivate(int) isStatic(int), isFinal(int) und isAbstract(int) isSynchronized(int) und isVolatile(int)  Beispiel:\n1 2 3  Method greetMethod = clazz.getMethod(methodName, parameterTypes); int modifiers = greetMethod.getModifiers(); boolean isPublic = Modifier.isPublic(modifiers);    Spezialfall Konstruktoren Der Aufruf eines Konstruktors per Reflection ist mit der Methode newInstance() möglich. Dies gilt nur für den Default-Konstruktor ohne Parameter. Der Aufruf eines Konstruktors mit Parameter erfordert zuerst einen Methodenaufruf von getDeclaredConstructor(Class\u003c?\u003e…). So erhalten wir den Konstruktor mit passender Signatur als Constructor-Objekt. Auf diesem Objekt kann anschliessend der Methodenaufruf newInstance(Object…) mit den korrekten Parametern erfolgen.\n Annotationen  Einführung Annotationen existieren seit Java 5 als neue Sprachelemente. Eine Annotation beginnt immer mit einem @-Zeichen und wird vor das entsprechende Element geschrieben, das annotiert werden soll.\nDie Einsatzgebiete sind wie folgt:\n Compiler-Informationen: Bereitstellung von Informationen an den Compiler wie beispielsweise mit der Annotation @Override Informationen für Tools: Diverse Annotationen, darunter auch selber geschriebene, können von speziellen Tools ausgewertet werden. Diese Tools nennt man Annotation Processor. Ein solcher Annotation Processor besitzt immer die Basisklasse javax.annotation.processing.AbstractProcessor. Schwergewichtige Frameworks wie beispielsweise Spring basieren in ihrer Funktionalität zu grossen Teilen auf Annotationen und deren Auswertung Informationsbereitstellung zur Laufzeit: Annotationen und deren Parameter können zur Laufzeit über Reflection ausgelesen und auch ausgewertet werden  Nicht alle Annotationen sind für jeden der oben genannten Anwendungsfälle geeignet. Der Grund dafür sind die verschiedenen Lebensdauern von Annotationen. Abhängig von der Definition verwirft oder überträgt der Java-Compiler Annotationen in das Kompilat oder nicht.\n Standard-Annotationen des JDKs Die folgenden Annotationen werden durch das JDK zur Verfügung gestellt. Bisher haben wir sie vielleicht bereits verwendet, nun wollen wir aber ihren Zweck nochmals genauer anschauen.\n@Deprecated Zweck:\n Anzeige, dass ein markiertes Element veraltet ist und nicht mehr verwendet werden sollte Wird ein solches Element verwendet, so beschwert sich der Compiler mit einer Warnung Als zusätzliche Angabe sollte @deprecated im JavaDoc verwendet werden.  Möglich auf:\n Klassen Felder (=Instanzvariablen) Methoden Parameter Konstruktoren Lokale Variablen Packages  Einsatzbeispiel:\n1 2 3 4 5 6 7  /** * @deprecated Diese Methode führt zu Problemen und sollte nicht mehr verwendet werden. Bitte stattdessen {@link #newMethod(int someValue)} benutzen. */ @Deprecated public void oldMethod(int someValue) { // ... }   @Override Zweck:\n Zeigt an, dass die annotierte Methode eine gleichnamige Methode einer Basisklasse überschreibt bzw. ein Interface implementiert Die Anwendung erscheint meistens nicht sehr sinnvoll, trotzdem hat diese Annotation ihre Berechtigung. Durch die Angabe dieser Annotation gleicht der Compiler die Signatur einer Methode mit derjenigen einer Basisklasse ab und warnt, wenn keine Überschreibung vorliegt Auf diese Weise kann man sehr schnell Fehler finden, falls man sich beim Methodennamen vertippt  Möglich auf:\n Methoden  Einsatzbeispiel:\n1 2 3 4  @Override public void overridingMethod(int someValue) { // ... }   @SuppressWarnings Zweck:\n Erlaubt die Unterdrückung von Compiler-Warnungen Der zu unterdrückende Typ wird als Parameter an die Annotation übergeben Damit wir keine Fehler “verstecken” sollten wir diese Annotation nur sparsam einsetzen Die folgenden vordefinierten Parameterwerte sind wichtig, sie unterdrücken die genannten Compiler-Warnungen:  boxing, für Typumwandlungen mit Auto-Boxing und Auto-Unboxing deprecation, für die Verwendung von veralteten Implementationen unused, für die Verwendung von unbenutzten Variablen und/oder Methoden unchecked, für problematische Zugriffe wo der Compiler keine Typsicherheit garantieren kann. Dies ist vorallem beim kombinierten Einsatz von generischen Datentypen und untypisierten Klassen der Fall    Möglich auf:\n Klassen Felder (=Instanzvariablen) Methoden Parameter Konstruktoren Lokale Variablen  Einsatzbeispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  @SuppressWarnings(\"unchecked\") public static void main(String[] args) { @SuppressWarnings(value = {\"unchecked\", \"deprecation\"}) final List\u003cPerson\u003e persons = getPersons(); for (final Person person: persons) { // ... } @Deprecated public static List getPersons() { return new ArrayList(); } }   In diesem Beispiel geht es wirklich nur darum, den Einsatz der Annotation zu zeigen. Das Beispiel zeigt generell eher schlechten Code, im Realfall würden die Methode getPersons() einfach überarbeiten anstatt die Warnungen zu unterdrücken :-)\n Definition eigener Annotationen Annotationen werden in eigenen Dateien analog zu Klassen und Interfaces definiert. Statt des Schlüsselworts class resp. interface wird hier @interface verwendet. Das sorgt automatisch dafür, dass die Annotation den Basistyp Annotation aus dem Package java.lang.annotation besitzt.\nDie Definition einer eigenen Annotation schauen wir nun anhand eines Beispiels genauer an. Wir erstellen eine Annotation für die Klassendokumentation.\nWir definieren nun zuerst eine eigene Annotation, diese soll zur Laufzeit für Typen (Klassen, Interfaces, Enumeratoren) zur Verfügung stehen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; // Meta-Annotationen @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) // Annotation-Definition public @interface Documentation { // Methode zur Übergabe von Informationen durch Parameter String id(); String name() default \"\"; String functionality(); }   Das ist dann auch schon alles zur Definition einer eigenen Annotation. Bevor wir weitermachen folgt hier eine kurze Information zu den einzelnen Elementen.\n   Element Beschreibung     @Retention Festlegung zu welchem Zeitpunkt die Annotation später verfügbar sein soll. Hier wurde mit RetentionPolicy.RUNTIME die Verfügbarkeit zur Laufzeit gewählt.   @Target Festlegung wo diese Annotation später im Sourcecode angewendet werden darf. Wir wollen damit Methoden markieren und wählen aus diesem Grund ElementType.METHOD.   default Angabe eines Default-Wertes für den entsprechenden Parameter, solche Parameter werden automatisch optional.    Der grössere Aufwand entsteht nun erst, wenn wir diese Annotation zur Laufzeit auslesen möchten.\n Eigene Annotationen zur Laufzeit auslesen Die Definition der Annotation ist nun bekannt. Wir betrachten diese nun im Einsatz und nehmen als Beispiel eine weitere Klasse, dort soll die Annotation nun zum Einsatz kommen:\nOhne Annotation 1 2 3 4 5 6 7 8 9 10 11 12 13  \\** * This is the request for a job * * @author u210148 Claudio Zesiger */ @Data public class JobRequest { private String id; private String title; private String code; private String creator; private LocalDateTime creationDate; }   Mit Annotation 1 2 3 4 5 6 7 8 9  @Documentation(id=\"u210148\", name=\"Claudio Zesiger\", functionality=\"This is the request for a job\") @Data public class JobRequest { private String id; private String title; private String code; private String creator; private LocalDateTime creationDate; }   Auswertung Die Auswertung unserer Annotation zur Laufzeit ist beispielsweise wie folgt möglich:\n1 2 3 4 5 6 7  public static void main(String\\[\\] args) { Documentation documentation = JobRequest.class.getAnnotation(Documentation.class); System.out.println(JobRequest.class.getName()); System.out.println(documentation.id()); System.out.println(documentation.name()); System.out.println(documentation.functionality()); }   Durch eine solche Auswertung liesse sich beispielsweise eine automatische Dokumentation generieren.\n","categories":"","description":"Annotationen + Reflection API\n","excerpt":"Annotationen + Reflection API\n","ref":"/training-sbb-puzzle/docs/java/reflection/","tags":"","title":"Annotationen \u0026 Reflection API"},{"body":"GitHub ist ein Webservice für das Verwalten von Software Code via Git. Darüber hinaus bietet GitHub viele weitere Funktionen, von Projektmanagement mit Taskverwaltung, über Wikis bis zum Buildserver. GitHub ist die Plattform für Opensource Projekte.\nWeitere Infos:\n Wikipedia GitHub Doku  GitHub Alternativen Natürlich ist GitHub nicht die einzige Plattform, welche diesen Service anbietet. Alle Alternativen haben ihre eigenen Features und Limitierungen, im Kern verwenden aber alle Git.\nAlternativen:\n Gitea: https://gitea.io Gitolite: https://gitolite.com Gitosis: https://github.com/tv42/gitosis GitLab: https://gitlab.com/ Bitbucket: https://bitbucket.org  GitHub Account Falls du noch keinen GitHub-Account hast, wäre jetzt der Moment einen zu erstellen. https://github.com/signup\nGit Protokolle Um auf ein entferntes Git Repository zuzugreifen, gibt es in der Regel zwei Varianten:\n HTTPS SSH  Beide Protokolle bieten standardmässig Verschlüsselung, Authentifizierung und Komprimierung.\nGit über HTTPS Kurze Wiederholung: Um ein Repository über HTTPS zu klonen verwendet man den Befehl:\n1  $ git clone https://github.com/kelseyhightower/nocode.git   Dies ist die einfachste Variante, um Code schnell herunterzuladen und lokal im eigenen Editor zu betrachten.\nVorteile:\n Anonymer Zugriff möglich Zugriff für Systeme, auf denen SSH weniger verbreitet ist HTTPS ist auf vielen Corporate Firewalls standardmässig offen  Nachteile:\n Zwischenspeicherung der Anmeldedaten mit HTTPS weniger benutzerfreundlich als mit SSH Keys Konfiguration des Webservers etwas komplizierter als die von SSH  Git über SSH Um ein Repository mit SSH zu klonen, kommt folgender Befehl zum Einsatz:\n1  $ git clone git@github.com:cajotafer/10xengineers.git   Für die meisten Anwendungsfälle ist dies der bevorzugte Weg, um entfernte Git Repositories zu verwenden.\nVorteile:\n SSH ist auf jedem Linux System bereits vorinstalliert (server- wie clientseitig) SSH Server sind sehr einfach zu konfigurieren Der Zugriff via SSH ist sehr sicher  Nachteile:\n Bietet keinen anonymen Zugriff  GitHub Features    Feature Funktion     Issues Ermöglichen es, Tasks in einem Repo zu erstellen und zu tracken.   Pull Requests Ein Pull Request ermöglicht es, Changes zu Reviewen und zu besprechen, bevor sie in einen Branch gemerged werden.   Forks Eine Fork ist eine Kopie von einem Git-Repo. Die Fork kann dann bearbeitet und angepasst werden, ohne dass das originale Repo davon betroffen ist.   GitHub Pages Basic Webseiten welche auf GitHub gehostet werden   GitHub Actions CI/CD Integration von GitHub    Hands On Für dieses Hands-On werden wir alles via Webinterface von GitHub machen. Ein Grossteil der Tasks können jedoch auch Lokal mit Git im Terminal gemacht werden.\nBranches und Pull Requests  https://guides.github.com/activities/hello-world/  Forks, Pull Requests, Reviews  Fork erstellen vom Repo.  Weitere User auf Fork hinzufügen  Branch auf Fork erstellen hello-world.sh auf dem Master Branch anpassen und committen. 1 2 3  #!/bin/bash  echo 'Hello World Master'    hello-world.sh auf dem neuen Branch anpassen und committen. 1 2 3  #!/bin/bash  echo 'Hello World Feature'    Pull Request erstellen Da auf beiden Branches die gleich Zeile bearbeitet wurde, kann GitHub die Branches nicht automatisch Mergen. Aus diesem Grund müssen zuerst die Konflikte gelöst werden  Teamkollege als Reviewer zuweisen. Review Changes umsetzen. Pull Request mergen. Merge Request auf Original Repo erstellen Ende  ","categories":"","description":"","excerpt":"GitHub ist ein Webservice für das Verwalten von Software Code via Git. …","ref":"/training-sbb-puzzle/docs/git/git-hub/","tags":"","title":"GitHub"},{"body":" SBB + Puzzle ITC Ausbildungsunterlagen für das Basislehrjahr        SBB  Puzzle ITC     ","categories":"","description":"","excerpt":" SBB + Puzzle ITC Ausbildungsunterlagen für das Basislehrjahr …","ref":"/training-sbb-puzzle/about/","tags":"","title":"About"},{"body":"  #td-cover-block-0 { background-image: url(/training-sbb-puzzle/featured-background_huf8b1504ff0064534a5a83c58fec4a04e_1559845_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/training-sbb-puzzle/featured-background_huf8b1504ff0064534a5a83c58fec4a04e_1559845_1920x1080_fill_q75_catmullrom_top.jpg); } }  Ausbildung SBB / Puzzle Docs   Labs   Exams   Show more!\n\n              Docs Read the documentations for learn the technologie.\nRead more …\n   Labs Start with your labs for practice the technologie.\nRead more …\n   Exams Run the exams for test your knowledge.\nRead more …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/training-sbb-puzzle/","tags":"","title":"Ausbildung SBB / Puzzle"},{"body":"","categories":"","description":"","excerpt":"","ref":"/training-sbb-puzzle/categories/","tags":"","title":"Categories"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/training-sbb-puzzle/docs/","tags":"","title":"Docs"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/training-sbb-puzzle/exams/","tags":"","title":"Exams"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/training-sbb-puzzle/labs/","tags":"","title":"Labs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/training-sbb-puzzle/tags/","tags":"","title":"Tags"}]